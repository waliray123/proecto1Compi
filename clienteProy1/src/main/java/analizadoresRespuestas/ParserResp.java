
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadoresRespuestas;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import objetos.ErrorCom;
import objetos.Respuesta;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserResp extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symR.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserResp() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserResp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserResp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\013\000\002\002" +
    "\003\000\002\011\002\000\002\003\020\000\002\012\002" +
    "\000\002\003\020\000\002\013\002\000\002\004\006\000" +
    "\002\014\002\000\002\004\006\000\002\015\002\000\002" +
    "\004\006\000\002\016\002\000\002\004\006\000\002\017" +
    "\002\000\002\004\006\000\002\020\002\000\002\005\006" +
    "\000\002\021\002\000\002\005\006\000\002\022\002\000" +
    "\002\005\006\000\002\007\004\000\002\007\002\000\002" +
    "\010\004\000\002\010\002\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\004\011\004\001\002\000\004\012\010\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\006\013\012\014\011\001" +
    "\002\000\004\004\023\001\002\000\004\010\013\001\002" +
    "\000\004\011\014\001\002\000\004\012\022\001\002\000" +
    "\004\011\016\001\002\000\004\012\017\001\002\000\004" +
    "\015\020\001\002\000\004\010\021\001\002\000\004\002" +
    "\000\001\002\000\004\014\011\001\002\000\006\017\025" +
    "\020\024\001\002\000\004\010\067\001\002\000\004\010" +
    "\026\001\002\000\004\005\027\001\002\000\014\021\ufffe" +
    "\022\ufffe\023\ufffe\024\ufffe\025\ufffe\001\002\000\014\021" +
    "\036\022\032\023\034\024\031\025\035\001\002\000\004" +
    "\004\040\001\002\000\004\004\040\001\002\000\004\006" +
    "\054\001\002\000\004\004\040\001\002\000\004\004\040" +
    "\001\002\000\004\004\040\001\002\000\006\006\ufffa\007" +
    "\ufffa\001\002\000\004\027\041\001\002\000\006\006\uffe6" +
    "\007\uffe6\001\002\000\006\006\uffe9\007\043\001\002\000" +
    "\014\021\036\022\032\023\034\024\031\025\035\001\002" +
    "\000\004\006\ufff9\001\002\000\004\006\uffea\001\002\000" +
    "\006\006\ufff2\007\ufff2\001\002\000\006\006\uffe9\007\043" +
    "\001\002\000\004\006\ufff1\001\002\000\006\006\ufff6\007" +
    "\ufff6\001\002\000\006\006\uffe9\007\043\001\002\000\004" +
    "\006\ufff5\001\002\000\004\011\055\001\002\000\004\012" +
    "\056\001\002\000\004\016\057\001\002\000\004\010\060" +
    "\001\002\000\006\002\ufffd\011\ufffd\001\002\000\006\006" +
    "\ufff8\007\ufff8\001\002\000\006\006\uffe9\007\043\001\002" +
    "\000\004\006\ufff7\001\002\000\006\006\ufff4\007\ufff4\001" +
    "\002\000\006\006\uffe9\007\043\001\002\000\004\006\ufff3" +
    "\001\002\000\004\005\070\001\002\000\010\021\ufffc\022" +
    "\ufffc\026\ufffc\001\002\000\010\021\075\022\072\026\074" +
    "\001\002\000\004\004\040\001\002\000\004\006\106\001" +
    "\002\000\004\004\040\001\002\000\004\004\040\001\002" +
    "\000\006\006\ufff0\007\ufff0\001\002\000\006\006\uffe7\007" +
    "\100\001\002\000\010\021\075\022\072\026\074\001\002" +
    "\000\004\006\uffef\001\002\000\004\006\uffe8\001\002\000" +
    "\006\006\uffec\007\uffec\001\002\000\006\006\uffe7\007\100" +
    "\001\002\000\004\006\uffeb\001\002\000\004\011\107\001" +
    "\002\000\004\012\110\001\002\000\004\016\111\001\002" +
    "\000\004\010\112\001\002\000\006\002\ufffb\011\ufffb\001" +
    "\002\000\006\006\uffee\007\uffee\001\002\000\006\006\uffe7" +
    "\007\100\001\002\000\004\006\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\027\001\001\000\004\004\032\001\001\000\004\006\063" +
    "\001\001\000\004\006\060\001\001\000\002\001\001\000" +
    "\004\006\050\001\001\000\004\006\045\001\001\000\004" +
    "\006\036\001\001\000\004\013\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\043\001\001\000\004" +
    "\004\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\046\001\001\000\004\007\047\001\001\000\002" +
    "\001\001\000\004\015\051\001\001\000\004\007\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\061\001\001\000\004\007\062\001\001\000\002" +
    "\001\001\000\004\016\064\001\001\000\004\007\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\070" +
    "\001\001\000\004\005\072\001\001\000\004\006\112\001" +
    "\001\000\002\001\001\000\004\006\102\001\001\000\004" +
    "\006\075\001\001\000\004\020\076\001\001\000\004\010" +
    "\100\001\001\000\004\005\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\103\001\001\000\004\010" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\113\001\001\000\004\010\114\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserResp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserResp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserResp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorCom> erroresCom;
    private List<Respuesta> respuestas;
    private ErrorCom errorAct;
    private Respuesta respuestaAct;


	public ParserResp(LexerResp lex) {
		super(lex);
        this.erroresCom = lex.getErroresCom();
        this.respuestas = new ArrayList<>();      
        errorAct = new ErrorCom(null,null,null,null,null); 
        respuestaAct = new Respuesta(null,null); 
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    protected int error_sync_size() {
		return 2;
	}

    public List<ErrorCom> getErrores(){
        return this.erroresCom;
    }

    public List<Respuesta> getRespuestas(){
        return this.respuestas;
    }

    private void insertarNuevoError(){
        this.errorAct = new ErrorCom(null,null,null,null,null);
        this.erroresCom.add(errorAct);
    }

    private void insertarRespuesta(){
        this.respuestaAct = new Respuesta(null,null);
        this.respuestas.add(respuestaAct);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserResp$actions {
  private final ParserResp parser;

  /** Constructor */
  CUP$ParserResp$actions(ParserResp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserResp$do_action_part00000000(
    int                        CUP$ParserResp$act_num,
    java_cup.runtime.lr_parser CUP$ParserResp$parser,
    java.util.Stack            CUP$ParserResp$stack,
    int                        CUP$ParserResp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserResp$result;

      /* select the action based on the action number */
      switch (CUP$ParserResp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).value;
		RESULT = start_val;
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserResp$parser.done_parsing();
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= MEN EXCL INI_RESPS MAY sig MEN EXCL FIN_RESPS MAY 
            {
              Object RESULT =null;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-8)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sig 
            {
              Object RESULT =null;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
insertarNuevoError();
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sig ::= MEN EXCL INI_RESP DOSPUNT ERR MAY CORCHI NT$0 par1 CORCHD MEN EXCL FIN_RESP MAY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-6)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-13)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
insertarRespuesta();
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sig ::= MEN EXCL INI_RESP DOSPUNT SOL MAY CORCHI NT$1 par2 CORCHD MEN EXCL FIN_RESP MAY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-6)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-13)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.peek()).value;
errorAct.setTipo(String.valueOf(nom));
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$2",9, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // par1 ::= TIPO nomp NT$2 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("par1",2, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.peek()).value;
errorAct.setDesc(String.valueOf(nom));
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$3",10, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // par1 ::= DESC nomp NT$3 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("par1",2, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.peek()).value;
errorAct.setLin(String.valueOf(nom));
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$4",11, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // par1 ::= LIN nomp NT$4 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("par1",2, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.peek()).value;
errorAct.setCol(String.valueOf(nom));
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$5",12, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // par1 ::= COL nomp NT$5 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("par1",2, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.peek()).value;
errorAct.setLex(String.valueOf(nom));
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$6",13, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // par1 ::= LEX nomp NT$6 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("par1",2, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.peek()).value;
respuestaAct.setTipo(String.valueOf(nom));
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$7",14, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // par2 ::= TIPO nomp NT$7 fin2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("par2",3, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$8 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.peek()).value;
respuestaAct.setDesc(String.valueOf(nom));
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$8",15, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // par2 ::= DESC nomp NT$8 fin2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("par2",3, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$9 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.peek()).value;
respuestaAct.setLogU(String.valueOf(nom));
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("NT$9",16, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // par2 ::= LOGU nomp NT$9 fin2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-2)).value;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("par2",3, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-3)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fin1 ::= COMA par1 
            {
              Object RESULT =null;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("fin1",5, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fin1 ::= 
            {
              Object RESULT =null;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("fin1",5, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fin2 ::= COMA par2 
            {
              Object RESULT =null;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("fin2",6, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fin2 ::= 
            {
              Object RESULT =null;

              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("fin2",6, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nomp ::= DOSPUNT CONT 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$ParserResp$stack.peek()).value;
		RESULT = cont;
              CUP$ParserResp$result = parser.getSymbolFactory().newSymbol("nomp",4, ((java_cup.runtime.Symbol)CUP$ParserResp$stack.elementAt(CUP$ParserResp$top-1)), ((java_cup.runtime.Symbol)CUP$ParserResp$stack.peek()), RESULT);
            }
          return CUP$ParserResp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserResp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserResp$do_action(
    int                        CUP$ParserResp$act_num,
    java_cup.runtime.lr_parser CUP$ParserResp$parser,
    java.util.Stack            CUP$ParserResp$stack,
    int                        CUP$ParserResp$top)
    throws java.lang.Exception
    {
              return CUP$ParserResp$do_action_part00000000(
                               CUP$ParserResp$act_num,
                               CUP$ParserResp$parser,
                               CUP$ParserResp$stack,
                               CUP$ParserResp$top);
    }
}

}
