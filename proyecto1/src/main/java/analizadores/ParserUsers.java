
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import objetos.ErrorCom;
import objetos.Usuario;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserUsers extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symU.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserUsers() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserUsers(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserUsers(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\006\000\002\006" +
    "\002\000\002\007\002\000\002\003\007\000\002\003\002" +
    "\000\002\010\002\000\002\004\007\000\002\011\002\000" +
    "\002\004\007\000\002\012\002\000\002\004\006\000\002" +
    "\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\004\012\005\001\002\000\004\002\036\001" +
    "\002\000\004\010\006\001\002\000\006\005\007\011\ufffc" +
    "\001\002\000\010\013\uffff\014\uffff\015\uffff\001\002\000" +
    "\004\011\011\001\002\000\004\002\000\001\002\000\010" +
    "\013\014\014\013\015\016\001\002\000\004\004\020\001" +
    "\002\000\004\004\020\001\002\000\006\005\ufffe\011\ufffe" +
    "\001\002\000\004\004\020\001\002\000\004\006\ufff7\001" +
    "\002\000\004\016\021\001\002\000\006\006\ufff5\007\ufff5" +
    "\001\002\000\004\006\023\001\002\000\006\005\ufff6\011" +
    "\ufff6\001\002\000\006\005\007\011\ufffc\001\002\000\004" +
    "\011\ufffd\001\002\000\004\007\ufffb\001\002\000\004\007" +
    "\030\001\002\000\010\013\014\014\013\015\016\001\002" +
    "\000\006\005\ufffa\011\ufffa\001\002\000\004\007\ufff9\001" +
    "\002\000\004\007\034\001\002\000\010\013\014\014\013" +
    "\015\016\001\002\000\006\005\ufff8\011\ufff8\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\004\006\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\014\001\001\000\004\005\031\001\001\000\004\005\025" +
    "\001\001\000\004\007\023\001\001\000\004\005\016\001" +
    "\001\000\004\012\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\024\001\001\000\002\001\001\000\004\010\026\001\001" +
    "\000\002\001\001\000\004\004\030\001\001\000\002\001" +
    "\001\000\004\011\032\001\001\000\002\001\001\000\004" +
    "\004\034\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserUsers$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserUsers$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserUsers$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorCom> erroresCom;
    private List<Usuario> usuarios;
    private Usuario usuarioAct;    

	public ParserUsers(LexerUsers lex) {
		super(lex);
        crearUsuarioNuevo();
        this.erroresCom = lex.getErroresCom();
        this.usuarios = new ArrayList<>();        
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    } 


    protected int error_sync_size() {
		return 2;
	}

    public List<ErrorCom> getErroresCom(){
        return erroresCom;
    }

    public List<Usuario> getUsuarios(){
        return usuarios;
    }

    private void crearUsuarioNuevo(){
        Usuario usuario = new Usuario();
        this.usuarioAct = usuario;        
    }

    private void insertarUsuario(){
        this.usuarios.add(usuarioAct);
    }

    private void insertarNombre(String nombreU){
        this.usuarioAct.setUsuario(nombreU);
    }

    private void insertarPass(String pass){
        this.usuarioAct.setPassword(pass);
    }

    private void insertarFecha(String fecha){
        this.usuarioAct.setFechaCrea(fecha);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserUsers$actions {
  private final ParserUsers parser;

  /** Constructor */
  CUP$ParserUsers$actions(ParserUsers parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserUsers$do_action_part00000000(
    int                        CUP$ParserUsers$act_num,
    java_cup.runtime.lr_parser CUP$ParserUsers$parser,
    java.util.Stack            CUP$ParserUsers$stack,
    int                        CUP$ParserUsers$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserUsers$result;

      /* select the action based on the action number */
      switch (CUP$ParserUsers$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-1)).value;
		RESULT = start_val;
              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserUsers$parser.done_parsing();
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INI PARI sig PARD 
            {
              Object RESULT =null;

              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-3)), ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
crearUsuarioNuevo();
              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("NT$0",4, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-1)).value;
insertarUsuario();
              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("NT$1",5, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sig ::= CORCHI NT$0 par NT$1 sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-1)).value;

              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-4)), ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sig ::= 
            {
              Object RESULT =null;

              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserUsers$stack.peek()).value;
insertarNombre(String.valueOf(nom));
              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("NT$2",6, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // par ::= USUARIO nomP NT$2 COMA par 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-3)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-3)).value;

              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("par",2, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-4)), ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserUsers$stack.peek()).value;
insertarPass(String.valueOf(nom));
              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("NT$3",7, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // par ::= PASS nomP NT$3 COMA par 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-3)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-3)).value;

              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("par",2, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-4)), ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserUsers$stack.peek()).value;
insertarFecha(String.valueOf(nom));
              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("NT$4",8, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // par ::= FECHA_CREA nomP NT$4 CORCHD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-2)).value;

              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("par",2, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-3)), ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nomP ::= DOSPUNT NOMBREP 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserUsers$stack.peek()).value;
		RESULT = nom;
              CUP$ParserUsers$result = parser.getSymbolFactory().newSymbol("nomP",3, ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.elementAt(CUP$ParserUsers$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUsers$stack.peek()), RESULT);
            }
          return CUP$ParserUsers$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserUsers$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserUsers$do_action(
    int                        CUP$ParserUsers$act_num,
    java_cup.runtime.lr_parser CUP$ParserUsers$parser,
    java.util.Stack            CUP$ParserUsers$stack,
    int                        CUP$ParserUsers$top)
    throws java.lang.Exception
    {
              return CUP$ParserUsers$do_action_part00000000(
                               CUP$ParserUsers$act_num,
                               CUP$ParserUsers$parser,
                               CUP$ParserUsers$stack,
                               CUP$ParserUsers$top);
    }
}

}
