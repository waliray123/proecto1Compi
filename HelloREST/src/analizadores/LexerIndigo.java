// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerIndigo.jflex

package analizadores;
import java_cup.runtime.*; 
import analizadores.sym.*;
import java.util.List;
import java.util.ArrayList;
import objetos.ErrorCom;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerIndigo implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\3\1\1\0\2\1\22\0\1\2\1\3\1\4"+
    "\1\0\1\5\2\0\1\6\4\0\1\7\1\10\2\11"+
    "\12\12\1\13\1\0\1\14\1\15\1\16\2\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\12"+
    "\1\47\1\50\1\0\1\51\1\0\1\52\1\0\2\12"+
    "\1\53\1\54\1\55\1\56\2\12\1\57\2\12\1\60"+
    "\1\12\1\61\1\62\3\12\1\63\1\64\1\65\5\12"+
    "\1\66\1\67\1\70\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\10\1\14\1\15"+
    "\1\16\1\17\1\20\30\0\2\10\1\21\3\0\1\22"+
    "\46\0\1\23\2\10\3\0\1\24\24\0\1\25\75\0"+
    "\1\26\11\0\1\27\12\0\1\30\23\0\1\31\13\0"+
    "\1\32\3\0\1\33\1\0\1\34\7\0\1\35\14\0"+
    "\1\36\4\0\1\37\10\0\1\40\13\0\1\41\1\42"+
    "\4\0\1\43\10\0\1\44\15\0\1\45\3\0\1\46"+
    "\15\0\1\47\10\0\1\50\1\51\1\52\17\0\1\53"+
    "\1\0\1\54\14\0\1\55\10\0\1\56\7\0\1\57"+
    "\7\0\1\60\1\61\11\0\1\62\1\63\17\0\1\64"+
    "\25\0\1\65\1\66\15\0\1\67\14\0\1\70\6\0"+
    "\1\71\7\0\1\72\2\0\1\73\1\74\1\75\6\0"+
    "\1\76\5\0\1\77\5\0\1\100\13\0\1\101\5\0"+
    "\1\102\4\0\1\103\2\0\1\104\7\0\1\105\2\0"+
    "\1\106\3\0\1\107\5\0\1\110\1\111\4\0\1\112"+
    "\1\113\1\114\2\0\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\71\0\71\0\71"+
    "\0\71\0\344\0\71\0\71\0\71\0\u011d\0\u0156\0\71"+
    "\0\71\0\71\0\71\0\71\0\u018f\0\u01c8\0\u0201\0\u023a"+
    "\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402"+
    "\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca"+
    "\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\71\0\u0759"+
    "\0\u0792\0\u07cb\0\71\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008"+
    "\0\u1041\0\71\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\71"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\71\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5"+
    "\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d"+
    "\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65"+
    "\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d"+
    "\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5"+
    "\0\u232e\0\u2367\0\71\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484"+
    "\0\u24bd\0\u24f6\0\u252f\0\u2568\0\71\0\u25a1\0\u25da\0\u2613"+
    "\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\71"+
    "\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a"+
    "\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32"+
    "\0\u2b6b\0\u2ba4\0\u2bdd\0\71\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\71"+
    "\0\u2e89\0\u2ec2\0\u2efb\0\71\0\u2f34\0\71\0\u2f6d\0\u2fa6"+
    "\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\71\0\u30fc\0\u3135"+
    "\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd"+
    "\0\u3336\0\u336f\0\71\0\u33a8\0\u33e1\0\u341a\0\u3453\0\71"+
    "\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b"+
    "\0\71\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa"+
    "\0\u37e3\0\u381c\0\u3855\0\u388e\0\71\0\71\0\u38c7\0\u3900"+
    "\0\u3939\0\u3972\0\71\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f"+
    "\0\u3ac8\0\u3b01\0\u3b3a\0\71\0\u3b73\0\u3bac\0\u3be5\0\u3c1e"+
    "\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6"+
    "\0\u3e1f\0\71\0\u3e58\0\u3e91\0\u3eca\0\71\0\u3f03\0\u3f3c"+
    "\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104"+
    "\0\u413d\0\u4176\0\u41af\0\71\0\u41e8\0\u4221\0\u425a\0\u4293"+
    "\0\u42cc\0\u4305\0\u433e\0\u4377\0\71\0\71\0\71\0\u43b0"+
    "\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578"+
    "\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\71\0\u4707"+
    "\0\71\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896"+
    "\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\71\0\u49ec\0\u4a25"+
    "\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\71\0\u4bb4"+
    "\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\71\0\u4d43"+
    "\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\71\0\71"+
    "\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061"+
    "\0\u509a\0\71\0\71\0\u50d3\0\u510c\0\u5145\0\u517e\0\u51b7"+
    "\0\u51f0\0\u5229\0\u5262\0\u529b\0\u52d4\0\u530d\0\u5346\0\u537f"+
    "\0\u53b8\0\u53f1\0\71\0\u542a\0\u5463\0\u549c\0\u54d5\0\u550e"+
    "\0\u5547\0\u5580\0\u55b9\0\u55f2\0\u562b\0\u5664\0\u569d\0\u56d6"+
    "\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3\0\u582c\0\u5865\0\u589e"+
    "\0\u58d7\0\u5910\0\u5949\0\u5982\0\u59bb\0\u59f4\0\u5a2d\0\u5a66"+
    "\0\u5a9f\0\u5ad8\0\u5b11\0\u5b4a\0\u5b83\0\u5bbc\0\u5bf5\0\71"+
    "\0\u5c2e\0\u5c67\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84\0\u5dbd"+
    "\0\u5df6\0\u5e2f\0\u5e68\0\u5ea1\0\71\0\u5eda\0\u5f13\0\u5f4c"+
    "\0\u5f85\0\u5fbe\0\u5ff7\0\71\0\u6030\0\u6069\0\u60a2\0\u60db"+
    "\0\u6114\0\u614d\0\u6186\0\71\0\u61bf\0\u61f8\0\71\0\71"+
    "\0\71\0\u6231\0\u626a\0\u62a3\0\u62dc\0\u6315\0\u634e\0\71"+
    "\0\u6387\0\u63c0\0\u63f9\0\u6432\0\u646b\0\71\0\u64a4\0\u64dd"+
    "\0\u6516\0\u654f\0\u6588\0\71\0\u65c1\0\u65fa\0\u6633\0\u666c"+
    "\0\u66a5\0\u66de\0\u6717\0\u6750\0\u6789\0\u67c2\0\u67fb\0\71"+
    "\0\u6834\0\u686d\0\u68a6\0\u68df\0\u6918\0\71\0\u6951\0\u698a"+
    "\0\u69c3\0\u69fc\0\71\0\u6a35\0\u6a6e\0\71\0\u6aa7\0\u6ae0"+
    "\0\u6b19\0\u6b52\0\u6b8b\0\u6bc4\0\u6bfd\0\71\0\u6c36\0\u6c6f"+
    "\0\71\0\u6ca8\0\u6ce1\0\u6d1a\0\71\0\u6d53\0\u6d8c\0\u6dc5"+
    "\0\u6dfe\0\u6e37\0\71\0\71\0\u6e70\0\u6ea9\0\u6ee2\0\u6f1b"+
    "\0\71\0\71\0\71\0\u6f54\0\u6f8d\0\71\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\2\1\15\5\12\1\16"+
    "\2\12\1\17\20\12\1\20\1\21\1\22\3\12\1\16"+
    "\1\17\6\12\1\23\1\2\1\24\72\0\2\3\70\0"+
    "\1\25\2\0\1\26\1\27\1\0\1\30\1\31\1\32"+
    "\1\31\3\27\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\2\32\1\41\1\42\1\32\1\43\1\44\1\45\1\46"+
    "\1\47\1\32\1\50\1\32\1\51\1\52\1\32\1\53"+
    "\2\32\2\27\1\30\13\32\1\0\1\54\13\0\1\12"+
    "\4\0\31\12\3\0\13\12\15\0\1\12\4\0\10\12"+
    "\1\55\20\12\3\0\4\12\1\55\6\12\15\0\1\12"+
    "\4\0\15\12\1\56\13\12\3\0\6\12\1\56\4\12"+
    "\5\0\1\25\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\1\60\1\32\1\61\1\32\1\37\6\32"+
    "\1\43\1\44\1\62\13\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\27\1\0\1\63\1\64\1\27\1\0"+
    "\2\27\1\64\4\27\31\64\2\27\14\64\1\0\1\65"+
    "\3\0\1\27\1\0\1\63\2\27\1\0\56\27\5\0"+
    "\1\31\1\0\1\57\1\64\1\27\1\0\2\31\1\66"+
    "\1\31\3\27\31\66\2\27\14\66\1\0\1\65\3\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\31\31"+
    "\2\27\14\31\5\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\31\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\6\32\1\67\4\32\1\70"+
    "\5\32\1\71\7\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\13\32\1\72\2\32\1\73\12\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\1\74\3\32"+
    "\1\75\2\32\1\76\3\32\1\77\2\32\1\100\2\32"+
    "\1\101\7\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\1\102\3\32\1\103\24\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\13\32\1\104\15\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\4\32\1\105"+
    "\3\32\1\106\5\32\1\107\12\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\3\32\1\110\10\32\1\111"+
    "\1\112\12\32\1\113\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\24\32\1\114\4\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\16\32\1\115\12\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\16\32\1\116"+
    "\12\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\16\32\1\117\5\32\1\120\4\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\17\32\1\121\11\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\1\122\30\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\1\123"+
    "\3\32\1\124\24\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\4\32\1\125\3\32\1\126\20\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\21\32\1\127"+
    "\1\130\6\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\7\32\1\131\21\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\54\1\0\1\132\5\0\1\54\4\0"+
    "\31\54\3\0\13\54\1\0\1\54\13\0\1\12\4\0"+
    "\15\12\1\133\13\12\3\0\6\12\1\133\4\12\15\0"+
    "\1\12\4\0\10\12\1\134\20\12\3\0\4\12\1\134"+
    "\6\12\5\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\6\32\1\67\22\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\16\32\1\135\2\32"+
    "\1\136\7\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\24\32\1\137\4\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\27\1\0\1\140\1\64\1\27\1\0"+
    "\2\27\1\64\4\27\31\64\2\27\14\64\1\0\1\65"+
    "\5\0\1\140\1\65\4\0\1\65\4\0\31\65\2\0"+
    "\14\65\1\0\1\65\3\0\1\31\1\0\1\140\1\64"+
    "\1\27\1\0\2\31\1\66\1\31\3\27\31\66\2\27"+
    "\14\66\1\0\1\65\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\21\32\1\141\7\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\10\32"+
    "\1\142\20\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\4\32\1\143\24\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\24\32\1\144\4\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\23\32\1\145\5\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\14\32"+
    "\1\146\14\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\15\32\1\147\13\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\4\32\1\150\24\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\1\151\30\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\13\32\1\152"+
    "\1\153\1\154\13\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\4\32\1\155\24\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\21\32\1\156\7\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\21\32\1\157"+
    "\7\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\10\32\1\160\20\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\2\32\1\161\26\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\2\32\1\162\10\32\1\163"+
    "\15\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\21\32\1\164\7\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\165\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\31\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\1\166\30\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\3\32\1\167\25\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\20\32\1\170\10\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\22\32"+
    "\1\171\6\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\6\32\1\172\22\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\3\32\1\173\25\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\14\32\1\174\14\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\4\32"+
    "\1\175\24\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\2\32\1\176\26\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\21\32\1\177\1\200\6\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\3\32\1\201"+
    "\25\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\20\32\1\202\10\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\14\32\1\203\12\32\1\204\1\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\23\32\1\205"+
    "\5\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\13\32\1\206\15\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\24\32\1\207\4\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\10\32\1\210\20\32\2\27"+
    "\1\31\13\32\1\0\1\54\13\0\1\12\4\0\31\12"+
    "\2\0\1\211\13\12\15\0\1\12\4\0\31\12\2\0"+
    "\1\212\13\12\5\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\15\32\1\213\13\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\4\32\1\214"+
    "\24\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\4\32\1\215\24\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\4\32\1\216\24\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\15\32\1\217\13\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\1\220\30\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\4\32"+
    "\1\221\24\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\16\32\1\222\12\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\17\32\1\223\11\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\23\32\1\224\5\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\2\32"+
    "\1\225\26\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\22\32\1\226\6\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\24\32\1\227\4\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\1\32\1\230\27\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\22\32"+
    "\1\231\6\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\1\232\2\32\1\233\25\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\12\32\1\234\16\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\4\32\1\235"+
    "\24\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\14\32\1\236\14\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\7\32\1\237\21\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\7\32\1\240\21\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\1\241\30\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\14\32"+
    "\1\242\14\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\6\32\1\243\22\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\10\32\1\244\20\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\24\32\1\245\4\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\23\32"+
    "\1\246\5\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\10\32\1\247\20\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\10\32\1\250\20\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\1\32\1\251\27\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\25\32"+
    "\1\252\3\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\10\32\1\253\20\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\1\254\30\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\22\32\1\255\6\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\10\32\1\256"+
    "\20\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\24\32\1\257\4\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\1\260\30\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\23\32\1\261\5\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\24\32\1\262\4\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\263\2\27\1\0\2\31\1\32\1\31\3\27\31\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\1\264"+
    "\30\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\23\32\1\265\5\32\2\27\1\31\13\32\1\0\1\54"+
    "\42\0\1\266\21\0\1\266\46\0\1\267\21\0\1\267"+
    "\7\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\22\32\1\270\6\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\1\232\30\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\25\32\1\271\3\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\6\32"+
    "\1\272\22\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\4\32\1\273\24\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\31\32\2\27\1\274\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\275\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\31\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\15\32\1\276\13\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\16\32\1\277\12\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\21\32"+
    "\1\300\7\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\12\32\1\301\16\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\4\32\1\302\24\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\14\32\1\303\14\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\16\32"+
    "\1\304\12\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\24\32\1\305\4\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\21\32\1\306\7\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\4\32\1\307\24\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\310\2\27\1\0\2\31\1\32\1\31\3\27\31\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\2\32"+
    "\1\311\26\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\10\32\1\312\20\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\1\313\30\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\4\32\1\314\24\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\22\32\1\315"+
    "\6\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\24\32\1\316\4\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\4\32\1\317\24\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\2\32\1\320\26\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\10\32\1\321"+
    "\20\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\10\32\1\322\20\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\15\32\1\323\13\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\5\32\1\324\23\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\21\32\1\325"+
    "\7\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\16\32\1\326\12\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\16\32\1\327\12\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\14\32\1\330\14\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\26\32\1\331"+
    "\2\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\16\32\1\332\12\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\4\32\1\333\24\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\334\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\31\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\16\32\1\335\12\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\13\32\1\336"+
    "\15\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\21\32\1\337\7\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\4\32\1\340\24\32\2\27\1\31\13\32"+
    "\1\0\1\54\36\0\1\341\24\0\1\341\43\0\1\342"+
    "\24\0\1\342\10\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\24\32\1\343\4\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\16\32\1\344"+
    "\12\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\1\345\30\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\1\346\30\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\23\31\1\347\5\31\2\27\14\31\5\0\1\32\1\0"+
    "\1\350\2\27\1\0\2\31\1\32\1\31\3\27\31\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\31\32"+
    "\2\27\1\351\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\16\32"+
    "\1\352\12\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\1\32\1\353\27\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\354\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\31\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\15\32\1\355\13\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\356\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\31\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\13\32\1\357\15\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\31\32"+
    "\2\27\1\360\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\15\32"+
    "\1\361\13\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\7\32\1\362\21\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\15\32\1\363\13\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\31\32\2\27\1\364"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\21\32\1\365\7\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\366\2\27\1\0\2\31\1\32\1\31\3\27\31\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\13\32"+
    "\1\367\15\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\15\32\1\370\13\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\4\32\1\371\24\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\4\32\1\372\24\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\5\32"+
    "\1\373\23\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\31\32\2\27\1\374\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\10\32\1\375\20\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\4\32\1\376\24\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\31\32\2\27\1\377"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\15\32\1\u0100\13\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\4\32"+
    "\1\u0101\24\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\16\32\1\u0102\12\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\u0103\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\31\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\21\32\1\u0104\7\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\31\32\2\27\1\u0105"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\16\32\1\u0106\12\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\10\32"+
    "\1\u0107\20\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\u0108\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\31\32\2\27\1\31\13\32\1\0\1\54\33\0"+
    "\1\u0109\25\0\1\u0109\42\0\1\u010a\25\0\1\u010a\12\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\13\32\1\u010b\15\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\31\32\2\27\1\u010c\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\21\32\1\u010d\7\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\2\32\1\u010e\26\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\4\31\1\u010f\24\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\23\31\1\u0110\5\31\2\27\14\31\5\0"+
    "\1\32\1\0\1\u0111\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\31\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\16\32\1\u0112\12\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\1\u0113\30\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\23\32\1\u0114\5\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\24\31\1\u0115\4\31\2\27"+
    "\14\31\5\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\2\32\1\u0116\26\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\1\u0117\30\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\1\u0118\30\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\2\31\1\u0119\11\31"+
    "\1\u011a\14\31\2\27\14\31\5\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\16\32\1\u011b"+
    "\12\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\1\u011c\30\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\u011d\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\31\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\u011e\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\31\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\21\32\1\u011f\7\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\10\32\1\u0120\20\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\24\31\1\u0121\4\31\2\27\14\31"+
    "\5\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\2\32\1\u0122\26\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\u0123\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\31\32\2\27\1\u0124\13\32"+
    "\1\0\1\54\3\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\5\31\1\u0125\11\31\1\u0126\11\31\2\27"+
    "\14\31\5\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\4\32\1\u0127\24\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\23\32\1\u0128\5\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\21\32"+
    "\1\u0129\7\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\10\32\1\u012a\20\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\25\31\1\u012b\3\31\2\27\14\31\5\0\1\32"+
    "\1\0\1\u012c\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\31\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\16\32\1\u012d\12\32\2\27\1\31\13\32\1\0\1\54"+
    "\30\0\1\u012e\27\0\1\u012e\40\0\1\u012f\27\0\1\u012f"+
    "\13\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\23\32\1\u0130\5\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\5\31\1\u0125\23\31\2\27\14\31\5\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\31\32\2\27\1\u0131\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\10\32\1\u0132\20\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\27\31\1\u0133\1\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\4\31\1\u0134"+
    "\24\31\2\27\14\31\5\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\27\32\1\u0135\1\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\22\32"+
    "\1\u0136\6\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\1\u0137\30\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\22\31\1\u0138\6\31\2\27\14\31\5\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\10\32"+
    "\1\u0139\20\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\u013a\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\31\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\21\32\1\u013b\7\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\21\31\1\u013c\7\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\16\31\1\u013d"+
    "\12\31\2\27\14\31\5\0\1\32\1\0\1\u013e\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\31\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\21\32\1\u013f\7\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\3\32"+
    "\1\u0140\25\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\2\32\1\u0141\26\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\22\31\1\u0142\6\31\2\27\14\31\5\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\1\u0143\30\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\2\31"+
    "\1\u0144\26\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\16\31\1\u0145\12\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\1\u0146\30\31\2\27\14\31\5\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\22\32"+
    "\1\u0147\6\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\21\32\1\u0148\7\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\3\32\1\u0149\25\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\3\32\1\u014a\25\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\10\31\1\u014b\20\31"+
    "\2\27\14\31\5\0\1\32\1\0\1\u014c\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\31\32\2\27\1\u014d\13\32"+
    "\1\0\1\54\22\0\1\u014e\31\0\1\u014e\36\0\1\u014f"+
    "\31\0\1\u014f\17\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\1\u0150\30\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\2\31\1\u0151\26\31\2\27\14\31"+
    "\5\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\16\32\1\u0152\12\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\23\31\1\u0153\5\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\27\31"+
    "\1\u0154\1\31\2\27\14\31\5\0\1\32\1\0\1\u0155"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\31\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\u0156"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\31\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\32\1\0\1\u0157"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\21\32\1\u0158"+
    "\1\u0159\6\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\24\31"+
    "\1\u015a\4\31\2\27\14\31\5\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\1\u015b\30\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\31\32"+
    "\2\27\1\u015c\13\32\1\0\1\54\3\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\4\31\1\u015d\24\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\3\31\1\u015e\25\31\2\27\14\31\5\0"+
    "\1\32\1\0\1\57\2\27\1\0\2\31\1\32\1\31"+
    "\3\27\10\32\1\u015f\20\32\2\27\1\31\13\32\1\0"+
    "\1\54\3\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\1\u0160\30\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\1\u0161\30\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\24\31\1\u0162\4\31\2\27\14\31"+
    "\5\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\21\32\1\u0163\7\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\1\u0164\30\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\21\31\1\u0165"+
    "\7\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\22\31\1\u0166\6\31\2\27\14\31"+
    "\5\0\1\32\1\0\1\u0167\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\31\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\16\32\1\u0168\12\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\u0169\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\31\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\32\1\0\1\57\2\27\1\0"+
    "\2\31\1\32\1\31\3\27\16\32\1\u016a\12\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\22\31\1\u016b\6\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\1\u016c\1\31\1\u016d\12\31\1\u016e\13\31\2\27"+
    "\14\31\32\0\1\u016f\27\0\1\u016f\40\0\1\u0170\27\0"+
    "\1\u0170\13\0\1\32\1\0\1\57\2\27\1\0\2\31"+
    "\1\32\1\31\3\27\21\32\1\u0158\7\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\16\31\1\u0171\12\31\2\27\14\31"+
    "\5\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\15\32\1\u0172\13\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\16\31\1\u0173\12\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\23\31"+
    "\1\u0174\5\31\2\27\14\31\5\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\31\32\2\27"+
    "\1\u0175\13\32\1\0\1\54\3\0\1\32\1\0\1\u0176"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\31\32\2\27"+
    "\1\31\13\32\1\0\1\54\3\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\1\u0177\30\31\2\27\14\31"+
    "\5\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\13\32\1\u0178\15\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\2\31\1\u0179\2\31\1\u017a\16\31\1\u017b"+
    "\4\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\1\u017c\30\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\10\31"+
    "\1\u017d\20\31\2\27\14\31\5\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\16\32\1\u017e"+
    "\12\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\u017f\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\31\32\2\27\1\31\13\32\1\0\1\54\3\0\1\32"+
    "\1\0\1\57\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\21\32\1\u0180\7\32\2\27\1\31\13\32\1\0\1\54"+
    "\3\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\1\u0181\30\31\2\27\14\31\5\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\31\32\2\27"+
    "\1\u0182\13\32\1\0\1\54\3\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\14\31\1\u0183\14\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\14\31\1\u0184\14\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\22\31\1\u0185"+
    "\6\31\2\27\14\31\5\0\1\32\1\0\1\57\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\22\32\1\u0186\6\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\32\1\0"+
    "\1\u0187\2\27\1\0\2\31\1\32\1\31\3\27\31\32"+
    "\2\27\1\31\13\32\1\0\1\54\3\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\10\31\1\u0188\20\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\15\31\1\u0189\13\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\21\31"+
    "\1\u018a\7\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\24\31\1\u018b\4\31\2\27"+
    "\14\31\45\0\1\u018c\21\0\1\u018c\46\0\1\u018d\21\0"+
    "\1\u018d\6\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\14\31\1\u018e\14\31\2\27\14\31\5\0\1\32"+
    "\1\0\1\u018f\2\27\1\0\2\31\1\32\1\31\3\27"+
    "\31\32\2\27\1\31\13\32\1\0\1\54\3\0\1\31"+
    "\1\0\1\u0190\2\27\1\0\4\31\3\27\31\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\16\31\1\u0191\12\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\3\31\1\u0192"+
    "\25\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\21\31\1\u0193\7\31\2\27\14\31"+
    "\5\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\4\32\1\u0194\24\32\2\27\1\31\13\32"+
    "\1\0\1\54\3\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\16\31\1\u0195\12\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\16\31"+
    "\1\u0196\12\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\22\31\1\u0197\6\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\2\31\1\u0198\26\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\5\31\1\u0199"+
    "\23\31\2\27\14\31\5\0\1\32\1\0\1\u019a\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\31\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\32\1\0\1\u019b\2\27"+
    "\1\0\2\31\1\32\1\31\3\27\31\32\2\27\1\31"+
    "\13\32\1\0\1\54\3\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\21\31\1\u019c\7\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\2\31\1\u019d\2\31\1\u019e\16\31\1\u019f\4\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\17\31\1\u01a0\11\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\24\31\1\u01a1"+
    "\4\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\26\31\1\u01a2\2\31\2\27\14\31"+
    "\5\0\1\32\1\0\1\57\2\27\1\0\2\31\1\32"+
    "\1\31\3\27\31\32\2\27\1\u01a3\13\32\1\0\1\54"+
    "\3\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\1\31\1\u01a4\27\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\23\31\1\u01a5\5\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\4\31\1\u01a6\24\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\4\31"+
    "\1\u01a7\24\31\2\27\14\31\46\0\1\u01a8\21\0\1\u01a8"+
    "\46\0\1\u01a9\21\0\1\u01a9\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\17\31\1\u01aa\11\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\u01ab\2\27\1\0\4\31"+
    "\3\27\31\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\1\u01ac\30\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\10\31\1\u01ad\20\31\2\27\14\31\5\0\1\32\1\0"+
    "\1\57\2\27\1\0\2\31\1\32\1\31\3\27\22\32"+
    "\1\u01ae\6\32\2\27\1\31\13\32\1\0\1\54\3\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\14\31"+
    "\1\u01af\14\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\21\31\1\u01b0\7\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\24\31\1\u01b1\4\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\10\31\1\u01b2"+
    "\20\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\10\31\1\u01b3\20\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\10\31\1\u01b4\20\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\16\31\1\u01b5\12\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\16\31\1\u01b6\12\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\22\31"+
    "\1\u01b7\6\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\16\31\1\u01b8\12\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\13\31\1\u01b9\15\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\16\31\1\u01ba"+
    "\12\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\2\31\1\u01bb\2\31\1\u01bc\23\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\13\31\1\u01bd\15\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\10\31"+
    "\1\u01be\20\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\1\u01bf\30\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\25\31\1\u01c0\3\31\2\27\14\31\25\0\1\u01c1\31\0"+
    "\1\u01c1\36\0\1\u01c2\31\0\1\u01c2\16\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\16\31\1\u01c3\12\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\23\31\1\u01c4\5\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\16\31"+
    "\1\u01c5\12\31\2\27\14\31\5\0\1\32\1\0\1\57"+
    "\2\27\1\0\2\31\1\32\1\31\3\27\31\32\2\27"+
    "\1\u01c6\13\32\1\0\1\54\3\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\17\31\1\u01c7\11\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\14\31\1\u01c8\14\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\1\u01c9\30\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\16\31\1\u01ca\12\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\2\31"+
    "\1\u01cb\26\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\16\31\1\u01cc\12\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\14\31\1\u01cd\14\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\21\31\1\u01ce"+
    "\7\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\24\31\1\u01cf\4\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\u01d0\2\27\1\0\4\31\3\27"+
    "\31\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\1\u01d1\30\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\21\31"+
    "\1\u01d2\7\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\16\31\1\u01d3\12\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\16\31\1\u01d4\12\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\4\31\1\u01d5"+
    "\24\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\6\31\1\u01d6\22\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\2\31\1\u01d7\26\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\16\31\1\u01d8\12\31"+
    "\2\27\14\31\26\0\1\u01d9\31\0\1\u01d9\36\0\1\u01da"+
    "\31\0\1\u01da\15\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\15\31\1\u01db\13\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\16\31"+
    "\1\u01dc\12\31\2\27\14\31\5\0\1\u01c5\1\0\1\u01dd"+
    "\2\27\1\0\4\31\3\27\31\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\24\31"+
    "\1\u01de\4\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\16\31\1\u01df\12\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\24\31\1\u01e0\4\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\21\31\1\u01e1"+
    "\7\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\15\31\1\u01e2\13\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\1\u01e3\30\31\2\27\14\31\5\0\1\u01cc\1\0\1\u01e4"+
    "\2\27\1\0\4\31\3\27\31\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\17\31"+
    "\1\u01e5\11\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\14\31\1\u01e6\14\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\1\u01e7\30\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\21\31\1\u01e8\7\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\3\31\1\u01e9\25\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\14\31"+
    "\1\u01ea\14\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\21\31\1\u01eb\7\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\u01ec\2\27\1\0\4\31"+
    "\3\27\31\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\24\31\1\u01ed\4\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\10\31\1\u01ee\20\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\u01ef\2\27\1\0\4\31\3\27\31\31\2\27"+
    "\14\31\44\0\1\u01f0\21\0\1\u01f0\46\0\1\u01f1\21\0"+
    "\1\u01f1\7\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\4\31\1\u01f2\24\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\22\31\1\u01f3"+
    "\6\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\22\31\1\u01f4\6\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\15\31\1\u01f5\13\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\13\31\1\u01f6\15\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\10\31\1\u01f7\20\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\u01f8\2\27\1\0\4\31\3\27\31\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\2\31\1\u01f9\26\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\16\31"+
    "\1\u01fa\12\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\24\31\1\u01fb\4\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\21\31\1\u01fc\7\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\10\31\1\u01fd"+
    "\20\31\2\27\14\31\5\0\1\31\1\0\1\u01fe\2\27"+
    "\1\0\4\31\3\27\31\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\17\31\1\u01ff"+
    "\11\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\14\31\1\u0200\14\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\16\31\1\u0201\12\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\16\31\1\u0202\12\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\15\31\1\u0203\13\31\2\27\14\31\5\0"+
    "\1\u01f3\1\0\1\u0204\2\27\1\0\4\31\3\27\31\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\24\31\1\u0205\4\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\4\31"+
    "\1\u0206\24\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\1\u0207\30\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\16\31\1\u0208\12\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\10\31\1\u0209\20\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\15\31\1\u020a\13\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\13\31"+
    "\1\u020b\15\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\10\31\1\u020c\20\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\16\31\1\u020d\12\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\16\31\1\u020e"+
    "\12\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\24\31\1\u020f\4\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\u0210\2\27\1\0\4\31\3\27"+
    "\31\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\15\31\1\u0211\13\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\23\31\1\u0212\5\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\1\u0213\30\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\15\31\1\u0214\13\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\21\31\1\u0215"+
    "\7\31\2\27\14\31\5\0\1\u0208\1\0\1\u0216\2\27"+
    "\1\0\4\31\3\27\31\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\16\31\1\u0217"+
    "\12\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\4\31\1\u0218\24\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\1\u0219\30\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\16\31\1\u021a\12\31\2\27"+
    "\14\31\5\0\1\u020d\1\0\1\u021b\2\27\1\0\4\31"+
    "\3\27\31\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\15\31\1\u021c\13\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\13\31\1\u021d\15\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\u021e\2\27\1\0\4\31\3\27\31\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\4\31\1\u021f\24\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\21\31\1\u0220"+
    "\7\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\23\31\1\u0221\5\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\10\31\1\u0222\20\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\15\31\1\u0223\13\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\15\31\1\u0224\13\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\21\31"+
    "\1\u0225\7\31\2\27\14\31\5\0\1\u021a\1\0\1\u0226"+
    "\2\27\1\0\4\31\3\27\31\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\4\31"+
    "\1\u0227\24\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\1\u0228\30\31\2\27\14\31"+
    "\5\0\1\u021f\1\0\1\u0229\2\27\1\0\4\31\3\27"+
    "\31\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\10\31\1\u022a\20\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\57\2\27\1\0\4\31\3\27"+
    "\4\31\1\u022b\24\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\16\31\1\u022c\12\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\u022d\2\27\1\0"+
    "\4\31\3\27\31\31\2\27\14\31\5\0\1\31\1\0"+
    "\1\57\2\27\1\0\4\31\3\27\23\31\1\u022e\5\31"+
    "\2\27\14\31\5\0\1\31\1\0\1\57\2\27\1\0"+
    "\4\31\3\27\10\31\1\u022f\20\31\2\27\14\31\5\0"+
    "\1\31\1\0\1\57\2\27\1\0\4\31\3\27\15\31"+
    "\1\u0230\13\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\21\31\1\u0231\7\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\16\31\1\u0232\12\31\2\27\14\31\5\0\1\u022b"+
    "\1\0\1\u0233\2\27\1\0\4\31\3\27\31\31\2\27"+
    "\14\31\5\0\1\u022c\1\0\1\u0234\2\27\1\0\4\31"+
    "\3\27\31\31\2\27\14\31\5\0\1\31\1\0\1\57"+
    "\2\27\1\0\4\31\3\27\4\31\1\u0235\24\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\16\31\1\u0236\12\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\23\31\1\u0237"+
    "\5\31\2\27\14\31\5\0\1\31\1\0\1\57\2\27"+
    "\1\0\4\31\3\27\10\31\1\u0238\20\31\2\27\14\31"+
    "\5\0\1\31\1\0\1\u0239\2\27\1\0\4\31\3\27"+
    "\31\31\2\27\14\31\5\0\1\u0235\1\0\1\u023a\2\27"+
    "\1\0\4\31\3\27\31\31\2\27\14\31\5\0\1\u0236"+
    "\1\0\1\u023b\2\27\1\0\4\31\3\27\31\31\2\27"+
    "\14\31\5\0\1\31\1\0\1\57\2\27\1\0\4\31"+
    "\3\27\4\31\1\u023c\24\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\57\2\27\1\0\4\31\3\27\16\31\1\u023d"+
    "\12\31\2\27\14\31\5\0\1\31\1\0\1\u023e\2\27"+
    "\1\0\4\31\3\27\31\31\2\27\14\31\5\0\1\31"+
    "\1\0\1\u023f\2\27\1\0\4\31\3\27\31\31\2\27"+
    "\14\31\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28614];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\4\11\1\1\3\11"+
    "\2\1\5\11\30\0\2\1\1\11\3\0\1\11\46\0"+
    "\1\11\2\1\3\0\1\11\24\0\1\11\75\0\1\11"+
    "\11\0\1\11\12\0\1\11\23\0\1\11\13\0\1\11"+
    "\3\0\1\11\1\0\1\11\7\0\1\11\14\0\1\11"+
    "\4\0\1\11\10\0\1\11\13\0\2\11\4\0\1\11"+
    "\10\0\1\11\15\0\1\11\3\0\1\11\15\0\1\11"+
    "\10\0\3\11\17\0\1\11\1\0\1\11\14\0\1\11"+
    "\10\0\1\11\7\0\1\11\7\0\2\11\11\0\2\11"+
    "\17\0\1\11\25\0\2\1\15\0\1\11\14\0\1\11"+
    "\6\0\1\11\7\0\1\11\2\0\3\11\6\0\1\11"+
    "\5\0\1\11\5\0\1\11\13\0\1\11\5\0\1\11"+
    "\4\0\1\11\2\0\1\11\7\0\1\11\2\0\1\11"+
    "\3\0\1\11\5\0\2\11\4\0\3\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorCom> erroresCom;

    private void error(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Simbolo no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }    

    private void errorPalabra(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Palabra no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorNOMP(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un nombrep",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorNOMO(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un nombreopciones",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorID(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un ID",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorFINS(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un fin sols",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    public List<ErrorCom> getErroresCom() {
        return erroresCom;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerIndigo(java.io.Reader in) {
      erroresCom = new ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error(yytext()); new Symbol(sym.error,yyline,yycolumn, yytext());
            }
            // fall through
          case 79: break;
          case 2:
            { 
            }
            // fall through
          case 80: break;
          case 3:
            { return new Symbol(sym.EXCL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 81: break;
          case 4:
            { return new Symbol(sym.DOLL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 5:
            { return new Symbol(sym.COMILLASIM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 6:
            { return new Symbol(sym.COMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 84: break;
          case 7:
            { return new Symbol(sym.GUIONM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 8:
            { errorPalabra(yytext());
            }
            // fall through
          case 86: break;
          case 9:
            { return new Symbol(sym.DOSPUNT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 10:
            { return new Symbol(sym.MEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 11:
            { return new Symbol(sym.MAY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 12:
            { return new Symbol(sym.CORCHCUADI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 13:
            { return new Symbol(sym.CORCHCUADD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 14:
            { return new Symbol(sym.GUIONB,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 15:
            { return new Symbol(sym.CORCHI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 16:
            { return new Symbol(sym.CORCHD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 17:
            { return new Symbol(sym.NOMBREP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 18:
            { return new Symbol(sym.CONTCONS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          case 19:
            { return new Symbol(sym.NOMBRE_OPCION,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 97: break;
          case 20:
            { return new Symbol(sym.ID,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 21:
            { return new Symbol(sym.ID2,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 22:
            { return new Symbol(sym.URL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 23:
            { return new Symbol(sym.BLUE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 24:
            { return new Symbol(sym.DARK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 25:
            { return new Symbol(sym.TEMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 26:
            { return new Symbol(sym.BOTON,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 27:
            { return new Symbol(sym.CLASE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 28:
            { return new Symbol(sym.COMBO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 29:
            { return new Symbol(sym.FILAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 30:
            { return new Symbol(sym.RADIO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 31:
            { return new Symbol(sym.WHITE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 32:
            { return new Symbol(sym.CENTRO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 33:
            { return new Symbol(sym.IMAGEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 34:
            { return new Symbol(sym.INDICE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 35:
            { return new Symbol(sym.NOMBRE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 36:
            { return new Symbol(sym.TITUL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 37:
            { return new Symbol(sym.DERECHA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 38:
            { return new Symbol(sym.FICHERO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 39:
            { return new Symbol(sym.USUARIO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 40:
            { return new Symbol(sym.CHECK_BOX,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 41:
            { return new Symbol(sym.COLUMNAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 42:
            { return new Symbol(sym.CONSULTAN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 43:
            { return new Symbol(sym.OPCIONES,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 44:
            { return new Symbol(sym.PASS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 45:
            { return new Symbol(sym.CONSULTS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 46:
            { return new Symbol(sym.IZQUIERDA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 47:
            { return new Symbol(sym.REQUE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 48:
            { return new Symbol(sym.ALINEA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 49:
            { return new Symbol(sym.AREA_TEXT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 50:
            { return new Symbol(sym.FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 51:
            { return new Symbol(sym.JUSTIFICAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 52:
            { return new Symbol(sym.CAMPO_TEXT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 53:
            { return new Symbol(sym.FINSOL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 54:
            { return new Symbol(sym.INISOL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 55:
            { return new Symbol(sym.NOMBRE_CAMPO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 56:
            { return new Symbol(sym.CREAR_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 57:
            { return new Symbol(sym.LOG_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 58:
            { return new Symbol(sym.TEXTO_VIS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 59:
            { return new Symbol(sym.USUARIO_NUEVO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 60:
            { return new Symbol(sym.FINSOLS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 61:
            { return new Symbol(sym.INISOLS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 62:
            { return new Symbol(sym.FECHA_CREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 63:
            { return new Symbol(sym.NUEVO_PASS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 64:
            { return new Symbol(sym.CONSULT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 65:
            { return new Symbol(sym.USUARIO_ANTI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 66:
            { return new Symbol(sym.ELIM_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 67:
            { return new Symbol(sym.NUEVO_FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 68:
            { return new Symbol(sym.USUARIO_CREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 69:
            { return new Symbol(sym.MOD_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 70:
            { return new Symbol(sym.AGRE_COMP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 71:
            { return new Symbol(sym.FECHA_MOD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 72:
            { return new Symbol(sym.ELIM_COMP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 73:
            { return new Symbol(sym.ELIM_FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 74:
            { return new Symbol(sym.CREDEN_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 75:
            { return new Symbol(sym.MOD_COMP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 76:
            { return new Symbol(sym.MOD_FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 77:
            { return new Symbol(sym.PARAMS_COMP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 78:
            { return new Symbol(sym.PARAMS_FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerIndigo [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerIndigo scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerIndigo(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
