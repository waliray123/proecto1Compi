// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerIndigo.jflex

package analizadores;
import java_cup.runtime.*; 
import analizadores.sym.*;
import java.util.List;
import java.util.ArrayList;
import objetos.ErrorCom;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerIndigo implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\3\1\1\0\2\1\22\0\1\2\1\3\1\4"+
    "\1\0\1\5\2\0\1\6\4\0\1\7\1\10\2\0"+
    "\12\11\1\12\1\0\1\13\1\0\1\14\2\0\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\11"+
    "\1\45\1\46\1\0\1\47\1\0\1\50\1\0\2\11"+
    "\1\51\1\52\1\53\1\54\2\11\1\55\2\11\1\56"+
    "\1\11\1\57\1\60\3\11\1\61\1\62\1\63\5\11"+
    "\1\64\1\65\1\66\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\10\1\14\1\15"+
    "\1\16\1\17\1\20\27\0\2\10\1\21\50\0\1\22"+
    "\2\10\3\0\1\23\24\0\1\24\75\0\1\25\11\0"+
    "\1\26\12\0\1\27\23\0\1\30\13\0\1\31\3\0"+
    "\1\32\1\0\1\33\7\0\1\34\14\0\1\35\4\0"+
    "\1\36\10\0\1\37\13\0\1\40\1\41\4\0\1\42"+
    "\10\0\1\43\15\0\1\44\3\0\1\45\15\0\1\46"+
    "\10\0\1\47\1\50\17\0\1\51\1\0\1\52\14\0"+
    "\1\53\10\0\1\54\7\0\1\55\7\0\1\56\1\57"+
    "\11\0\1\60\1\61\17\0\1\62\25\0\1\63\1\64"+
    "\15\0\1\65\14\0\1\66\6\0\1\67\7\0\1\70"+
    "\2\0\1\71\1\72\1\73\6\0\1\74\5\0\1\75"+
    "\5\0\1\76\13\0\1\77\5\0\1\100\4\0\1\101"+
    "\2\0\1\102\7\0\1\103\2\0\1\104\3\0\1\105"+
    "\5\0\1\106\1\107\4\0\1\110\1\111\1\112\2\0"+
    "\1\113\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[571];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\245\0\67\0\67\0\67"+
    "\0\67\0\334\0\67\0\67\0\67\0\u0113\0\u014a\0\67"+
    "\0\67\0\67\0\67\0\67\0\u0181\0\u01b8\0\u01ef\0\u0226"+
    "\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de"+
    "\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596"+
    "\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\67\0\u06e0\0\u0717"+
    "\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf"+
    "\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\67\0\u0f78"+
    "\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\67\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1"+
    "\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\67\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a"+
    "\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\67"+
    "\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373"+
    "\0\u23aa\0\67\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4"+
    "\0\u252b\0\u2562\0\u2599\0\u25d0\0\67\0\u2607\0\u263e\0\u2675"+
    "\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d"+
    "\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5"+
    "\0\67\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66"+
    "\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\67\0\u2c79\0\u2cb0\0\u2ce7"+
    "\0\67\0\u2d1e\0\67\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\67\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2"+
    "\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\67"+
    "\0\u316a\0\u31a1\0\u31d8\0\u320f\0\67\0\u3246\0\u327d\0\u32b4"+
    "\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\67\0\u33fe\0\u3435"+
    "\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed"+
    "\0\u3624\0\67\0\67\0\u365b\0\u3692\0\u36c9\0\u3700\0\67"+
    "\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8"+
    "\0\67\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39"+
    "\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\67\0\u3bba"+
    "\0\u3bf1\0\u3c28\0\67\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b"+
    "\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3"+
    "\0\67\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074"+
    "\0\u40ab\0\67\0\67\0\u40e2\0\u4119\0\u4150\0\u4187\0\u41be"+
    "\0\u41f5\0\u422c\0\u4263\0\u429a\0\u42d1\0\u4308\0\u433f\0\u4376"+
    "\0\u43ad\0\u43e4\0\67\0\u441b\0\67\0\u4452\0\u4489\0\u44c0"+
    "\0\u44f7\0\u452e\0\u4565\0\u459c\0\u45d3\0\u460a\0\u4641\0\u4678"+
    "\0\u46af\0\67\0\u46e6\0\u471d\0\u4754\0\u478b\0\u47c2\0\u47f9"+
    "\0\u4830\0\u4867\0\67\0\u489e\0\u48d5\0\u490c\0\u4943\0\u497a"+
    "\0\u49b1\0\u49e8\0\67\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb"+
    "\0\u4b32\0\u4b69\0\67\0\67\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45"+
    "\0\u4c7c\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\67\0\67\0\u4d8f"+
    "\0\u4dc6\0\u4dfd\0\u4e34\0\u4e6b\0\u4ea2\0\u4ed9\0\u4f10\0\u4f47"+
    "\0\u4f7e\0\u4fb5\0\u4fec\0\u5023\0\u505a\0\u5091\0\67\0\u50c8"+
    "\0\u50ff\0\u5136\0\u516d\0\u51a4\0\u51db\0\u5212\0\u5249\0\u5280"+
    "\0\u52b7\0\u52ee\0\u5325\0\u535c\0\u5393\0\u53ca\0\u5401\0\u5438"+
    "\0\u546f\0\u54a6\0\u54dd\0\u5514\0\u554b\0\u5582\0\u55b9\0\u55f0"+
    "\0\u5627\0\u565e\0\u5695\0\u56cc\0\u5703\0\u573a\0\u5771\0\u57a8"+
    "\0\u57df\0\u5816\0\u584d\0\67\0\u5884\0\u58bb\0\u58f2\0\u5929"+
    "\0\u5960\0\u5997\0\u59ce\0\u5a05\0\u5a3c\0\u5a73\0\u5aaa\0\u5ae1"+
    "\0\67\0\u5b18\0\u5b4f\0\u5b86\0\u5bbd\0\u5bf4\0\u5c2b\0\67"+
    "\0\u5c62\0\u5c99\0\u5cd0\0\u5d07\0\u5d3e\0\u5d75\0\u5dac\0\67"+
    "\0\u5de3\0\u5e1a\0\67\0\67\0\67\0\u5e51\0\u5e88\0\u5ebf"+
    "\0\u5ef6\0\u5f2d\0\u5f64\0\67\0\u5f9b\0\u5fd2\0\u6009\0\u6040"+
    "\0\u6077\0\67\0\u60ae\0\u60e5\0\u611c\0\u6153\0\u618a\0\67"+
    "\0\u61c1\0\u61f8\0\u622f\0\u6266\0\u629d\0\u62d4\0\u630b\0\u6342"+
    "\0\u6379\0\u63b0\0\u63e7\0\67\0\u641e\0\u6455\0\u648c\0\u64c3"+
    "\0\u64fa\0\67\0\u6531\0\u6568\0\u659f\0\u65d6\0\67\0\u660d"+
    "\0\u6644\0\67\0\u667b\0\u66b2\0\u66e9\0\u6720\0\u6757\0\u678e"+
    "\0\u67c5\0\67\0\u67fc\0\u6833\0\67\0\u686a\0\u68a1\0\u68d8"+
    "\0\67\0\u690f\0\u6946\0\u697d\0\u69b4\0\u69eb\0\67\0\67"+
    "\0\u6a22\0\u6a59\0\u6a90\0\u6ac7\0\67\0\67\0\67\0\u6afe"+
    "\0\u6b35\0\67\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[571];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\5\12\1\16\2\12\1\17"+
    "\20\12\1\20\1\21\1\22\3\12\1\16\1\17\6\12"+
    "\1\23\1\2\1\24\70\0\2\3\66\0\1\25\2\0"+
    "\1\26\2\0\1\27\1\30\1\31\2\0\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\30\1\40\1\41\1\30"+
    "\1\42\1\43\1\44\1\45\1\46\1\30\1\47\1\30"+
    "\1\50\1\51\1\30\1\52\2\30\2\0\1\27\13\30"+
    "\1\0\1\53\12\0\1\12\3\0\31\12\3\0\13\12"+
    "\14\0\1\12\3\0\10\12\1\54\20\12\3\0\4\12"+
    "\1\54\6\12\14\0\1\12\3\0\15\12\1\55\13\12"+
    "\3\0\6\12\1\55\4\12\5\0\1\25\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\1\57\1\30\1\60"+
    "\1\30\1\36\6\30\1\42\1\43\1\61\13\30\2\0"+
    "\1\31\13\30\1\0\1\53\6\0\1\62\3\0\1\62"+
    "\3\0\31\62\2\0\14\62\1\0\1\62\3\0\1\31"+
    "\1\0\1\56\1\62\2\0\1\31\1\63\1\31\2\0"+
    "\31\63\2\0\14\63\1\0\1\62\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\31\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\31\31\2\0\14\31\5\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\6\30"+
    "\1\64\4\30\1\65\5\30\1\66\7\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\13\30\1\67\2\30\1\70"+
    "\12\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\1\71"+
    "\3\30\1\72\2\30\1\73\3\30\1\74\2\30\1\75"+
    "\2\30\1\76\7\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\1\77\3\30\1\100\24\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\13\30\1\101\15\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\4\30\1\102\3\30\1\103"+
    "\5\30\1\104\12\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\3\30\1\105\10\30\1\106\1\107\12\30\1\110"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\24\30\1\111"+
    "\4\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\16\30"+
    "\1\112\12\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\16\30\1\113\12\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\16\30\1\114\5\30\1\115\4\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\17\30\1\116\11\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\1\117\30\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\1\120\3\30\1\121"+
    "\24\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\4\30"+
    "\1\122\3\30\1\123\20\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\21\30\1\124\1\125\6\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\7\30\1\126\21\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\53\1\0\1\127"+
    "\4\0\1\53\3\0\31\53\3\0\13\53\1\0\1\53"+
    "\12\0\1\12\3\0\15\12\1\130\13\12\3\0\6\12"+
    "\1\130\4\12\14\0\1\12\3\0\10\12\1\131\20\12"+
    "\3\0\4\12\1\131\6\12\5\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\6\30\1\64\22\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\16\30\1\132"+
    "\2\30\1\133\7\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\24\30\1\134\4\30\2\0\1\31\13\30\1\0"+
    "\1\53\5\0\1\135\1\62\3\0\1\62\3\0\31\62"+
    "\2\0\14\62\1\0\1\62\3\0\1\31\1\0\1\135"+
    "\1\62\2\0\1\31\1\63\1\31\2\0\31\63\2\0"+
    "\14\63\1\0\1\62\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\21\30\1\136\7\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\10\30\1\137\20\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\4\30\1\140"+
    "\24\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\24\30"+
    "\1\141\4\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\23\30\1\142\5\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\14\30\1\143\14\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\15\30\1\144\13\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\4\30\1\145\24\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\1\146\30\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\13\30\1\147\1\150\1\151"+
    "\13\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\4\30"+
    "\1\152\24\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\21\30\1\153\7\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\21\30\1\154\7\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\10\30\1\155\20\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\2\30\1\156\26\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\2\30\1\157\10\30\1\160"+
    "\15\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\21\30"+
    "\1\161\7\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\162\3\0\1\31\1\30\1\31\2\0"+
    "\31\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\1\163"+
    "\30\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\3\30"+
    "\1\164\25\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\20\30\1\165\10\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\22\30\1\166\6\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\6\30\1\167\22\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\3\30\1\170\25\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\14\30\1\171\14\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\4\30\1\172\24\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\2\30\1\173"+
    "\26\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\21\30"+
    "\1\174\1\175\6\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\3\30\1\176\25\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\20\30\1\177\10\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\14\30\1\200\12\30\1\201\1\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\23\30\1\202"+
    "\5\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\13\30"+
    "\1\203\15\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\24\30\1\204\4\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\10\30\1\205\20\30\2\0\1\31\13\30\1\0"+
    "\1\53\12\0\1\12\3\0\31\12\2\0\1\206\13\12"+
    "\14\0\1\12\3\0\31\12\2\0\1\207\13\12\5\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\15\30\1\210\13\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\4\30\1\211\24\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\4\30\1\212\24\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\4\30\1\213\24\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\15\30\1\214\13\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\1\215\30\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\4\30\1\216\24\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\16\30\1\217"+
    "\12\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\17\30"+
    "\1\220\11\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\23\30\1\221\5\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\2\30\1\222\26\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\22\30\1\223\6\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\24\30\1\224\4\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\1\30\1\225\27\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\22\30\1\226\6\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\1\227\2\30"+
    "\1\230\25\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\12\30\1\231\16\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\4\30\1\232\24\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\14\30\1\233\14\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\7\30\1\234\21\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\7\30\1\235\21\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\1\236\30\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\14\30\1\237\14\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\6\30\1\240"+
    "\22\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\10\30"+
    "\1\241\20\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\24\30\1\242\4\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\23\30\1\243\5\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\10\30\1\244\20\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\10\30\1\245\20\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\1\30\1\246\27\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\25\30\1\247\3\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\10\30\1\250"+
    "\20\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\1\251"+
    "\30\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\22\30"+
    "\1\252\6\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\10\30\1\253\20\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\24\30\1\254\4\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\1\255\30\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\23\30\1\256\5\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\24\30\1\257\4\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\260\3\0"+
    "\1\31\1\30\1\31\2\0\31\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\1\261\30\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\23\30\1\262\5\30\2\0\1\31"+
    "\13\30\1\0\1\53\40\0\1\263\21\0\1\263\44\0"+
    "\1\264\21\0\1\264\7\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\22\30\1\265\6\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\1\227\30\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\25\30\1\266\3\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\6\30\1\267"+
    "\22\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\4\30"+
    "\1\270\24\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\31\30\2\0\1\271\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\272\3\0\1\31\1\30\1\31\2\0\31\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\15\30\1\273"+
    "\13\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\16\30"+
    "\1\274\12\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\21\30\1\275\7\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\12\30\1\276\16\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\4\30\1\277\24\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\14\30\1\300\14\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\16\30\1\301\12\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\24\30\1\302\4\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\21\30\1\303"+
    "\7\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\4\30"+
    "\1\304\24\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\305\3\0\1\31\1\30\1\31\2\0"+
    "\31\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\2\30"+
    "\1\306\26\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\10\30\1\307\20\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\1\310\30\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\4\30\1\311\24\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\22\30\1\312\6\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\24\30\1\313\4\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\4\30\1\314\24\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\2\30\1\315\26\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\10\30\1\316"+
    "\20\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\10\30"+
    "\1\317\20\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\15\30\1\320\13\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\5\30\1\321\23\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\21\30\1\322\7\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\16\30\1\323\12\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\16\30\1\324\12\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\14\30\1\325\14\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\26\30\1\326"+
    "\2\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\16\30"+
    "\1\327\12\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\4\30\1\330\24\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\331\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\16\30\1\332\12\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\13\30\1\333\15\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\21\30\1\334\7\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\4\30\1\335\24\30\2\0\1\31"+
    "\13\30\1\0\1\53\34\0\1\336\24\0\1\336\41\0"+
    "\1\337\24\0\1\337\10\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\24\30\1\340\4\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\16\30\1\341\12\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\1\342\30\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\1\343\30\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\23\31\1\344\5\31\2\0"+
    "\14\31\5\0\1\30\1\0\1\345\3\0\1\31\1\30"+
    "\1\31\2\0\31\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\346\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\16\30\1\347\12\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\1\30\1\350\27\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\351\3\0\1\31\1\30"+
    "\1\31\2\0\31\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\15\30\1\352\13\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\353\3\0\1\31\1\30"+
    "\1\31\2\0\31\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\13\30\1\354\15\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\31\30\2\0\1\355\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\15\30\1\356\13\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\7\30\1\357\21\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\15\30\1\360\13\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\31\30\2\0\1\361\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\21\30\1\362\7\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\363\3\0"+
    "\1\31\1\30\1\31\2\0\31\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\13\30\1\364\15\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\15\30\1\365\13\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\4\30\1\366\24\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\4\30\1\367"+
    "\24\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\5\30"+
    "\1\370\23\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\31\30\2\0\1\371\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\10\30"+
    "\1\372\20\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\4\30\1\373\24\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\374\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\15\30\1\375\13\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\4\30\1\376\24\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\16\30\1\377\12\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\u0100\3\0\1\31"+
    "\1\30\1\31\2\0\31\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\21\30\1\u0101\7\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\31\30\2\0\1\u0102\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\16\30\1\u0103\12\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\10\30\1\u0104\20\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\u0105\3\0"+
    "\1\31\1\30\1\31\2\0\31\30\2\0\1\31\13\30"+
    "\1\0\1\53\31\0\1\u0106\25\0\1\u0106\40\0\1\u0107"+
    "\25\0\1\u0107\12\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\13\30\1\u0108\15\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\31\30\2\0\1\u0109\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\21\30\1\u010a\7\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\2\30\1\u010b\26\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\4\31\1\u010c\24\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\23\31"+
    "\1\u010d\5\31\2\0\14\31\5\0\1\30\1\0\1\u010e"+
    "\3\0\1\31\1\30\1\31\2\0\31\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\16\30\1\u010f\12\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\1\u0110\30\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\23\30\1\u0111\5\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\24\31\1\u0112\4\31\2\0"+
    "\14\31\5\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\2\30\1\u0113\26\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\1\u0114\30\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\1\u0115\30\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\2\31\1\u0116\11\31\1\u0117\14\31\2\0\14\31"+
    "\5\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\16\30\1\u0118\12\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\1\u0119\30\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\u011a\3\0\1\31\1\30"+
    "\1\31\2\0\31\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\u011b\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\21\30\1\u011c\7\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\10\30\1\u011d\20\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\24\31\1\u011e\4\31\2\0\14\31\5\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\2\30\1\u011f"+
    "\26\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\u0120\3\0\1\31\1\30\1\31\2\0\31\30"+
    "\2\0\1\u0121\13\30\1\0\1\53\3\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\5\31\1\u0122\11\31\1\u0123"+
    "\11\31\2\0\14\31\5\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\4\30\1\u0124\24\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\23\30\1\u0125\5\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\21\30\1\u0126"+
    "\7\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\10\30"+
    "\1\u0127\20\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\25\31\1\u0128"+
    "\3\31\2\0\14\31\5\0\1\30\1\0\1\u0129\3\0"+
    "\1\31\1\30\1\31\2\0\31\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\16\30\1\u012a\12\30\2\0\1\31"+
    "\13\30\1\0\1\53\26\0\1\u012b\27\0\1\u012b\36\0"+
    "\1\u012c\27\0\1\u012c\13\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\23\30\1\u012d\5\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\5\31\1\u0122\23\31\2\0\14\31"+
    "\5\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\u012e\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\10\30\1\u012f\20\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\31\1\0\1\56\3\0\3\31\2\0\27\31"+
    "\1\u0130\1\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\4\31\1\u0131\24\31\2\0\14\31"+
    "\5\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\27\30\1\u0132\1\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\22\30\1\u0133\6\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\1\u0134\30\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\22\31\1\u0135\6\31\2\0\14\31\5\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\10\30"+
    "\1\u0136\20\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\u0137\3\0\1\31\1\30\1\31\2\0"+
    "\31\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\21\30"+
    "\1\u0138\7\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\21\31\1\u0139"+
    "\7\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\16\31\1\u013a\12\31\2\0\14\31\5\0"+
    "\1\30\1\0\1\u013b\3\0\1\31\1\30\1\31\2\0"+
    "\31\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\21\30"+
    "\1\u013c\7\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\3\30\1\u013d\25\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\2\30\1\u013e\26\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\22\31\1\u013f\6\31\2\0\14\31\5\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\1\u0140\30\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\2\31\1\u0141\26\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\16\31\1\u0142\12\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\1\u0143\30\31\2\0\14\31"+
    "\5\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\22\30\1\u0144\6\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\21\30\1\u0145\7\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\3\30\1\u0146\25\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\3\30\1\u0147\25\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\10\31\1\u0148\20\31\2\0\14\31"+
    "\5\0\1\30\1\0\1\u0149\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\u014a\13\30\1\0\1\53\20\0"+
    "\1\u014b\31\0\1\u014b\34\0\1\u014c\31\0\1\u014c\17\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\1\u014d\30\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\2\31\1\u014e"+
    "\26\31\2\0\14\31\5\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\16\30\1\u014f\12\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\23\31\1\u0150\5\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\27\31"+
    "\1\u0151\1\31\2\0\14\31\5\0\1\30\1\0\1\u0152"+
    "\3\0\1\31\1\30\1\31\2\0\31\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\u0153\3\0"+
    "\1\31\1\30\1\31\2\0\31\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\21\30\1\u0154\1\u0155\6\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\24\31\1\u0156\4\31\2\0\14\31"+
    "\5\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\1\u0157\30\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\u0158\13\30\1\0\1\53\3\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\4\31\1\u0159"+
    "\24\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\3\31\1\u015a\25\31\2\0\14\31\5\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\10\30\1\u015b\20\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\1\u015c\30\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\1\u015d\30\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\31\1\0\1\56\3\0\3\31\2\0\24\31"+
    "\1\u015e\4\31\2\0\14\31\5\0\1\30\1\0\1\56"+
    "\3\0\1\31\1\30\1\31\2\0\21\30\1\u015f\7\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\1\u0160\30\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\21\31"+
    "\1\u0161\7\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\22\31\1\u0162\6\31\2\0\14\31"+
    "\5\0\1\30\1\0\1\u0163\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\16\30\1\u0164\12\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\u0165\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\30\1\0\1\56\3\0\1\31\1\30\1\31\2\0"+
    "\16\30\1\u0166\12\30\2\0\1\31\13\30\1\0\1\53"+
    "\3\0\1\31\1\0\1\56\3\0\3\31\2\0\22\31"+
    "\1\u0167\6\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\1\u0168\1\31\1\u0169\12\31\1\u016a"+
    "\13\31\2\0\14\31\30\0\1\u016b\27\0\1\u016b\36\0"+
    "\1\u016c\27\0\1\u016c\13\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\21\30\1\u0154\7\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\16\31\1\u016d\12\31\2\0\14\31"+
    "\5\0\1\30\1\0\1\56\3\0\1\31\1\30\1\31"+
    "\2\0\15\30\1\u016e\13\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\16\31\1\u016f\12\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\23\31\1\u0170\5\31\2\0"+
    "\14\31\5\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\31\30\2\0\1\u0171\13\30\1\0\1\53"+
    "\3\0\1\30\1\0\1\u0172\3\0\1\31\1\30\1\31"+
    "\2\0\31\30\2\0\1\31\13\30\1\0\1\53\3\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\1\u0173\30\31"+
    "\2\0\14\31\5\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\13\30\1\u0174\15\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\2\31\1\u0175\2\31\1\u0176\16\31\1\u0177"+
    "\4\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\1\u0178\30\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\10\31\1\u0179\20\31"+
    "\2\0\14\31\5\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\16\30\1\u017a\12\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\30\1\0\1\u017b\3\0"+
    "\1\31\1\30\1\31\2\0\31\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\21\30\1\u017c\7\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\1\u017d\30\31\2\0\14\31\5\0\1\30"+
    "\1\0\1\56\3\0\1\31\1\30\1\31\2\0\31\30"+
    "\2\0\1\u017e\13\30\1\0\1\53\3\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\14\31\1\u017f\14\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\14\31\1\u0180\14\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\22\31\1\u0181\6\31\2\0"+
    "\14\31\5\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\22\30\1\u0182\6\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\30\1\0\1\u0183\3\0\1\31"+
    "\1\30\1\31\2\0\31\30\2\0\1\31\13\30\1\0"+
    "\1\53\3\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\10\31\1\u0184\20\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\15\31\1\u0185\13\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\21\31\1\u0186\7\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\24\31\1\u0187\4\31\2\0"+
    "\14\31\43\0\1\u0188\21\0\1\u0188\44\0\1\u0189\21\0"+
    "\1\u0189\6\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\14\31\1\u018a\14\31\2\0\14\31\5\0\1\30\1\0"+
    "\1\u018b\3\0\1\31\1\30\1\31\2\0\31\30\2\0"+
    "\1\31\13\30\1\0\1\53\3\0\1\31\1\0\1\u018c"+
    "\3\0\3\31\2\0\31\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\16\31\1\u018d\12\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\3\31\1\u018e\25\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\21\31\1\u018f\7\31"+
    "\2\0\14\31\5\0\1\30\1\0\1\56\3\0\1\31"+
    "\1\30\1\31\2\0\4\30\1\u0190\24\30\2\0\1\31"+
    "\13\30\1\0\1\53\3\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\16\31\1\u0191\12\31\2\0\14\31\5\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\16\31\1\u0192"+
    "\12\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\22\31\1\u0193\6\31\2\0\14\31\5\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\2\31\1\u0194"+
    "\26\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\5\31\1\u0195\23\31\2\0\14\31\5\0"+
    "\1\30\1\0\1\u0196\3\0\1\31\1\30\1\31\2\0"+
    "\31\30\2\0\1\31\13\30\1\0\1\53\3\0\1\30"+
    "\1\0\1\u0197\3\0\1\31\1\30\1\31\2\0\31\30"+
    "\2\0\1\31\13\30\1\0\1\53\3\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\21\31\1\u0198\7\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\2\31\1\u0199\2\31\1\u019a\16\31\1\u019b\4\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\17\31\1\u019c\11\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\24\31\1\u019d\4\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\26\31\1\u019e\2\31\2\0\14\31\5\0\1\30\1\0"+
    "\1\56\3\0\1\31\1\30\1\31\2\0\31\30\2\0"+
    "\1\u019f\13\30\1\0\1\53\3\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\1\31\1\u01a0\27\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\23\31"+
    "\1\u01a1\5\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\4\31\1\u01a2\24\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\4\31"+
    "\1\u01a3\24\31\2\0\14\31\44\0\1\u01a4\21\0\1\u01a4"+
    "\44\0\1\u01a5\21\0\1\u01a5\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\17\31\1\u01a6\11\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\u01a7\3\0\3\31\2\0\31\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\1\u01a8\30\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\10\31\1\u01a9\20\31\2\0"+
    "\14\31\5\0\1\30\1\0\1\56\3\0\1\31\1\30"+
    "\1\31\2\0\22\30\1\u01aa\6\30\2\0\1\31\13\30"+
    "\1\0\1\53\3\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\14\31\1\u01ab\14\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\21\31\1\u01ac\7\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\24\31\1\u01ad\4\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\10\31\1\u01ae\20\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\10\31\1\u01af\20\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\10\31\1\u01b0\20\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\16\31\1\u01b1\12\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\16\31\1\u01b2\12\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\22\31\1\u01b3\6\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\16\31\1\u01b4\12\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\13\31\1\u01b5\15\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\16\31\1\u01b6\12\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\2\31\1\u01b7\2\31\1\u01b8\23\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\13\31"+
    "\1\u01b9\15\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\10\31\1\u01ba\20\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\1\u01bb"+
    "\30\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\25\31\1\u01bc\3\31\2\0\14\31\23\0"+
    "\1\u01bd\31\0\1\u01bd\34\0\1\u01be\31\0\1\u01be\16\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\16\31\1\u01bf"+
    "\12\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\23\31\1\u01c0\5\31\2\0\14\31\5\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\16\31\1\u01c1"+
    "\12\31\2\0\14\31\5\0\1\30\1\0\1\56\3\0"+
    "\1\31\1\30\1\31\2\0\31\30\2\0\1\u01c2\13\30"+
    "\1\0\1\53\3\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\17\31\1\u01c3\11\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\14\31\1\u01c4\14\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\1\u01c5\30\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\16\31\1\u01c6\12\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\2\31\1\u01c7\26\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\16\31\1\u01c8\12\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\14\31\1\u01c9\14\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\21\31\1\u01ca\7\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\24\31\1\u01cb\4\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\u01cc\3\0\3\31\2\0\31\31\2\0\14\31\5\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\1\u01cd\30\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\21\31\1\u01ce\7\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\16\31\1\u01cf\12\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\16\31\1\u01d0\12\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\4\31\1\u01d1\24\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\6\31\1\u01d2\22\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\2\31\1\u01d3\26\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\16\31\1\u01d4\12\31\2\0\14\31\24\0\1\u01d5"+
    "\31\0\1\u01d5\34\0\1\u01d6\31\0\1\u01d6\15\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\15\31\1\u01d7\13\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\16\31\1\u01d8\12\31\2\0\14\31\5\0\1\u01c1"+
    "\1\0\1\u01d9\3\0\3\31\2\0\31\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\24\31"+
    "\1\u01da\4\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\16\31\1\u01db\12\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\24\31"+
    "\1\u01dc\4\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\21\31\1\u01dd\7\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\15\31"+
    "\1\u01de\13\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\1\u01df\30\31\2\0\14\31\5\0"+
    "\1\u01c8\1\0\1\u01e0\3\0\3\31\2\0\31\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\17\31\1\u01e1\11\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\14\31\1\u01e2\14\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\1\u01e3\30\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\21\31\1\u01e4\7\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\3\31"+
    "\1\u01e5\25\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\14\31\1\u01e6\14\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\21\31"+
    "\1\u01e7\7\31\2\0\14\31\5\0\1\31\1\0\1\u01e8"+
    "\3\0\3\31\2\0\31\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\24\31\1\u01e9\4\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\10\31\1\u01ea\20\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\u01eb\3\0\3\31\2\0\31\31\2\0\14\31"+
    "\42\0\1\u01ec\21\0\1\u01ec\44\0\1\u01ed\21\0\1\u01ed"+
    "\7\0\1\31\1\0\1\56\3\0\3\31\2\0\4\31"+
    "\1\u01ee\24\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\22\31\1\u01ef\6\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\22\31"+
    "\1\u01f0\6\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\15\31\1\u01f1\13\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\13\31"+
    "\1\u01f2\15\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\10\31\1\u01f3\20\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\u01f4\3\0\3\31\2\0\31\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\2\31\1\u01f5\26\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\16\31\1\u01f6\12\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\24\31\1\u01f7\4\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\21\31\1\u01f8\7\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\10\31\1\u01f9\20\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\u01fa\3\0\3\31\2\0\31\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\17\31"+
    "\1\u01fb\11\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\14\31\1\u01fc\14\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\16\31"+
    "\1\u01fd\12\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\16\31\1\u01fe\12\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\15\31"+
    "\1\u01ff\13\31\2\0\14\31\5\0\1\u01ef\1\0\1\u0200"+
    "\3\0\3\31\2\0\31\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\24\31\1\u0201\4\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\4\31\1\u0202\24\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\1\u0203\30\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\16\31\1\u0204\12\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\10\31\1\u0205\20\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\15\31\1\u0206\13\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\13\31\1\u0207\15\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\10\31\1\u0208\20\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\16\31\1\u0209\12\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\16\31\1\u020a\12\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\24\31\1\u020b\4\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\u020c\3\0\3\31\2\0"+
    "\31\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\15\31\1\u020d\13\31\2\0\14\31\5\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\23\31\1\u020e"+
    "\5\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\1\u020f\30\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\15\31\1\u0210\13\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\21\31\1\u0211\7\31\2\0\14\31\5\0\1\u0204"+
    "\1\0\1\u0212\3\0\3\31\2\0\31\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\16\31"+
    "\1\u0213\12\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\4\31\1\u0214\24\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\1\u0215"+
    "\30\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\16\31\1\u0216\12\31\2\0\14\31\5\0"+
    "\1\u0209\1\0\1\u0217\3\0\3\31\2\0\31\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\15\31\1\u0218\13\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\13\31\1\u0219\15\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\u021a\3\0\3\31\2\0"+
    "\31\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\4\31\1\u021b\24\31\2\0\14\31\5\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\21\31\1\u021c"+
    "\7\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\23\31\1\u021d\5\31\2\0\14\31\5\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\10\31\1\u021e"+
    "\20\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\15\31\1\u021f\13\31\2\0\14\31\5\0"+
    "\1\31\1\0\1\56\3\0\3\31\2\0\15\31\1\u0220"+
    "\13\31\2\0\14\31\5\0\1\31\1\0\1\56\3\0"+
    "\3\31\2\0\21\31\1\u0221\7\31\2\0\14\31\5\0"+
    "\1\u0216\1\0\1\u0222\3\0\3\31\2\0\31\31\2\0"+
    "\14\31\5\0\1\31\1\0\1\56\3\0\3\31\2\0"+
    "\4\31\1\u0223\24\31\2\0\14\31\5\0\1\31\1\0"+
    "\1\56\3\0\3\31\2\0\1\u0224\30\31\2\0\14\31"+
    "\5\0\1\u021b\1\0\1\u0225\3\0\3\31\2\0\31\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\10\31\1\u0226\20\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\4\31\1\u0227\24\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\16\31\1\u0228\12\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\u0229\3\0\3\31\2\0\31\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\23\31"+
    "\1\u022a\5\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\10\31\1\u022b\20\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\15\31"+
    "\1\u022c\13\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\21\31\1\u022d\7\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\16\31"+
    "\1\u022e\12\31\2\0\14\31\5\0\1\u0227\1\0\1\u022f"+
    "\3\0\3\31\2\0\31\31\2\0\14\31\5\0\1\u0228"+
    "\1\0\1\u0230\3\0\3\31\2\0\31\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\4\31"+
    "\1\u0231\24\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\16\31\1\u0232\12\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\56\3\0\3\31\2\0\23\31"+
    "\1\u0233\5\31\2\0\14\31\5\0\1\31\1\0\1\56"+
    "\3\0\3\31\2\0\10\31\1\u0234\20\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\u0235\3\0\3\31\2\0\31\31"+
    "\2\0\14\31\5\0\1\u0231\1\0\1\u0236\3\0\3\31"+
    "\2\0\31\31\2\0\14\31\5\0\1\u0232\1\0\1\u0237"+
    "\3\0\3\31\2\0\31\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\56\3\0\3\31\2\0\4\31\1\u0238\24\31"+
    "\2\0\14\31\5\0\1\31\1\0\1\56\3\0\3\31"+
    "\2\0\16\31\1\u0239\12\31\2\0\14\31\5\0\1\31"+
    "\1\0\1\u023a\3\0\3\31\2\0\31\31\2\0\14\31"+
    "\5\0\1\31\1\0\1\u023b\3\0\3\31\2\0\31\31"+
    "\2\0\14\31\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\4\11\1\1\3\11"+
    "\2\1\5\11\27\0\2\1\1\11\50\0\1\11\2\1"+
    "\3\0\1\11\24\0\1\11\75\0\1\11\11\0\1\11"+
    "\12\0\1\11\23\0\1\11\13\0\1\11\3\0\1\11"+
    "\1\0\1\11\7\0\1\11\14\0\1\11\4\0\1\11"+
    "\10\0\1\11\13\0\2\11\4\0\1\11\10\0\1\11"+
    "\15\0\1\11\3\0\1\11\15\0\1\11\10\0\2\11"+
    "\17\0\1\11\1\0\1\11\14\0\1\11\10\0\1\11"+
    "\7\0\1\11\7\0\2\11\11\0\2\11\17\0\1\11"+
    "\25\0\2\1\15\0\1\11\14\0\1\11\6\0\1\11"+
    "\7\0\1\11\2\0\3\11\6\0\1\11\5\0\1\11"+
    "\5\0\1\11\13\0\1\11\5\0\1\11\4\0\1\11"+
    "\2\0\1\11\7\0\1\11\2\0\1\11\3\0\1\11"+
    "\5\0\2\11\4\0\3\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[571];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorCom> erroresCom;

    private void error(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Simbolo no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }    

    private void errorPalabra(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Palabra no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorNOMP(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un nombrep",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorNOMO(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un nombreopciones",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorID(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un ID",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorFINS(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un fin sols",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    public List<ErrorCom> getErroresCom() {
        return erroresCom;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerIndigo(java.io.Reader in) {
      erroresCom = new ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error(yytext()); new Symbol(sym.error,yyline,yycolumn, yytext());
            }
            // fall through
          case 77: break;
          case 2:
            { 
            }
            // fall through
          case 78: break;
          case 3:
            { return new Symbol(sym.EXCL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 79: break;
          case 4:
            { return new Symbol(sym.DOLL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 80: break;
          case 5:
            { return new Symbol(sym.COMILLASIM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 81: break;
          case 6:
            { return new Symbol(sym.COMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 7:
            { return new Symbol(sym.GUIONM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 8:
            { errorPalabra(yytext());
            }
            // fall through
          case 84: break;
          case 9:
            { return new Symbol(sym.DOSPUNT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 10:
            { return new Symbol(sym.MEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 11:
            { return new Symbol(sym.MAY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 12:
            { return new Symbol(sym.CORCHCUADI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 13:
            { return new Symbol(sym.CORCHCUADD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 14:
            { return new Symbol(sym.GUIONB,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 15:
            { return new Symbol(sym.CORCHI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 16:
            { return new Symbol(sym.CORCHD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 17:
            { return new Symbol(sym.NOMBREP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 18:
            { return new Symbol(sym.NOMBRE_OPCION,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 19:
            { return new Symbol(sym.ID,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 20:
            { return new Symbol(sym.ID2,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          case 21:
            { return new Symbol(sym.URL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 97: break;
          case 22:
            { return new Symbol(sym.BLUE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 23:
            { return new Symbol(sym.DARK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 24:
            { return new Symbol(sym.TEMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 25:
            { return new Symbol(sym.BOTON,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 26:
            { return new Symbol(sym.CLASE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 27:
            { return new Symbol(sym.COMBO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 28:
            { return new Symbol(sym.FILAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 29:
            { return new Symbol(sym.RADIO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 30:
            { return new Symbol(sym.WHITE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 31:
            { return new Symbol(sym.CENTRO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 32:
            { return new Symbol(sym.IMAGEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 33:
            { return new Symbol(sym.INDICE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 34:
            { return new Symbol(sym.NOMBRE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 35:
            { return new Symbol(sym.TITUL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 36:
            { return new Symbol(sym.DERECHA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 37:
            { return new Symbol(sym.FICHERO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 38:
            { return new Symbol(sym.USUARIO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 39:
            { return new Symbol(sym.CHECK_BOX,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 40:
            { return new Symbol(sym.COLUMNAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 41:
            { return new Symbol(sym.OPCIONES,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 42:
            { return new Symbol(sym.PASS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 43:
            { return new Symbol(sym.CONSULTS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 44:
            { return new Symbol(sym.IZQUIERDA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 45:
            { return new Symbol(sym.REQUE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 46:
            { return new Symbol(sym.ALINEA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 47:
            { return new Symbol(sym.AREA_TEXT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 48:
            { return new Symbol(sym.FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 49:
            { return new Symbol(sym.JUSTIFICAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 50:
            { return new Symbol(sym.CAMPO_TEXT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 51:
            { return new Symbol(sym.FINSOL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 52:
            { return new Symbol(sym.INISOL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 53:
            { return new Symbol(sym.NOMBRE_CAMPO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 54:
            { return new Symbol(sym.CREAR_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 55:
            { return new Symbol(sym.LOG_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 56:
            { return new Symbol(sym.TEXTO_VIS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 57:
            { return new Symbol(sym.USUARIO_NUEVO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 58:
            { return new Symbol(sym.FINSOLS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 59:
            { return new Symbol(sym.INISOLS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 60:
            { return new Symbol(sym.FECHA_CREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 61:
            { return new Symbol(sym.NUEVO_PASS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 62:
            { return new Symbol(sym.CONSULT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 63:
            { return new Symbol(sym.USUARIO_ANTI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 64:
            { return new Symbol(sym.ELIM_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 65:
            { return new Symbol(sym.NUEVO_FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 66:
            { return new Symbol(sym.USUARIO_CREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 67:
            { return new Symbol(sym.MOD_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 68:
            { return new Symbol(sym.AGRE_COMP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 69:
            { return new Symbol(sym.FECHA_MOD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 70:
            { return new Symbol(sym.ELIM_COMP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 71:
            { return new Symbol(sym.ELIM_FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 72:
            { return new Symbol(sym.CREDEN_U,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 73:
            { return new Symbol(sym.MOD_COMP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 74:
            { return new Symbol(sym.MOD_FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 75:
            { return new Symbol(sym.PARAMS_COMP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 76:
            { return new Symbol(sym.PARAMS_FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerIndigo [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerIndigo scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerIndigo(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
