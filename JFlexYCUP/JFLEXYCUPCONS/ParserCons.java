
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import objetos.ErrorCom;
import objetos.Solicitud;
import objetos.Parametro;
import objetos.Consulta;
import objetos.ParamComp;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCons extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symC.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCons() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCons(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCons(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\012\002\000\002\002" +
    "\012\000\002\013\002\000\002\003\005\000\002\003\002" +
    "\000\002\004\004\000\002\004\002\000\002\005\006\000" +
    "\002\005\002\000\002\014\002\000\002\006\007\000\002" +
    "\015\002\000\002\011\005\000\002\016\002\000\002\011" +
    "\005\000\002\017\002\000\002\011\005\000\002\011\002" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\016\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\026\010\001\002\000\004\013\000\001\002\000" +
    "\004\013\012\001\002\000\006\014\ufffc\030\014\001\002" +
    "\000\004\014\021\001\002\000\006\014\ufffe\015\ufffe\001" +
    "\002\000\006\014\ufffa\015\016\001\002\000\006\014\ufffc" +
    "\030\014\001\002\000\004\014\ufffd\001\002\000\004\014" +
    "\ufffb\001\002\000\006\002\ufff8\017\022\001\002\000\004" +
    "\013\024\001\002\000\004\002\uffff\001\002\000\004\030" +
    "\026\001\002\000\004\014\055\001\002\000\016\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\001\002\000" +
    "\016\005\036\006\033\007\035\010\032\011\034\012\031" +
    "\001\002\000\010\025\037\027\042\030\041\001\002\000" +
    "\010\025\uffeb\027\uffeb\030\uffeb\001\002\000\010\025\uffe6" +
    "\027\uffe6\030\uffe6\001\002\000\010\025\uffe8\027\uffe8\030" +
    "\uffe8\001\002\000\010\025\uffe7\027\uffe7\030\uffe7\001\002" +
    "\000\010\025\uffe9\027\uffe9\030\uffe9\001\002\000\010\025" +
    "\uffea\027\uffea\030\uffea\001\002\000\012\014\uffee\020\uffee" +
    "\021\uffee\022\uffee\001\002\000\012\014\uffef\020\044\021" +
    "\046\022\043\001\002\000\012\014\uffec\020\uffec\021\uffec" +
    "\022\uffec\001\002\000\012\014\uffed\020\uffed\021\uffed\022" +
    "\uffed\001\002\000\004\030\ufff3\001\002\000\004\030\ufff5" +
    "\001\002\000\004\014\ufff6\001\002\000\004\030\ufff1\001" +
    "\002\000\004\030\026\001\002\000\004\014\ufff0\001\002" +
    "\000\004\030\026\001\002\000\004\014\ufff4\001\002\000" +
    "\004\030\026\001\002\000\004\014\ufff2\001\002\000\004" +
    "\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\010\001\001\000\002\001\001\000\004\003\012\001" +
    "\001\000\002\001\001\000\004\013\014\001\001\000\004" +
    "\004\016\001\001\000\004\003\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\024\001\001\000" +
    "\002\001\001\000\004\014\026\001\001\000\004\007\027" +
    "\001\001\000\004\010\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\052\001\001\000\004\015\050\001\001\000\002\001" +
    "\001\000\004\017\046\001\001\000\004\006\047\001\001" +
    "\000\002\001\001\000\004\006\051\001\001\000\002\001" +
    "\001\000\004\006\053\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCons$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCons$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCons$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorCom> erroresCom;
    private Consulta consultaAct;    
    private ParamComp paramCompAct;

	public ParserCons(LexerCons lex) {
		super(lex);
        this.erroresCom = lex.getErroresCom();
        this.consultaAct = new Consulta();
        this.paramCompAct = new ParamComp();
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    private void setNuevoParamComp(){
        this.paramCompAct = new ParamComp();
        this.consultaAct.setNuevoParametroComp(this.paramCompAct);
    }

    protected int error_sync_size() {
		return 2;
	}

    public Consulta getConsulta(){
        return consultaAct;
    }

    public List<ErrorCom> getErroresCom(){
        return this.erroresCom;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCons$actions {
  private final ParserCons parser;

  /** Constructor */
  CUP$ParserCons$actions(ParserCons parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCons$do_action_part00000000(
    int                        CUP$ParserCons$act_num,
    java_cup.runtime.lr_parser CUP$ParserCons$parser,
    java.util.Stack            CUP$ParserCons$stack,
    int                        CUP$ParserCons$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCons$result;

      /* select the action based on the action number */
      switch (CUP$ParserCons$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).value;
		RESULT = start_val;
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCons$parser.done_parsing();
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int idFleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).left;
		int idFright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).right;
		String idF = (String)((java_cup.runtime.Symbol) CUP$ParserCons$stack.peek()).value;
consultaAct.setIdFormulario(idF);
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("NT$0",8, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= SELECTT FLECHA ID NT$0 CORCHCUADI paramMostr CORCHCUADD sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-4)).value;
		int idFleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-5)).left;
		int idFright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-5)).right;
		String idF = (String)((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-5)).value;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int parMleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).left;
		int parMright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).right;
		String parM = (String)((java_cup.runtime.Symbol) CUP$ParserCons$stack.peek()).value;
consultaAct.setNuevoParametroMostrar(parM);
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("NT$1",9, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // paramMostr ::= PARAM NT$1 paramMostrp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).value;
		int parMleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)).left;
		int parMright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)).right;
		String parM = (String)((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)).value;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("paramMostr",1, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // paramMostr ::= 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("paramMostr",1, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // paramMostrp ::= COMA paramMostr 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("paramMostrp",2, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // paramMostrp ::= 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("paramMostrp",2, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sig ::= WHERE CORCHCUADI paramRel CORCHCUADD 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("sig",3, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sig ::= 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("sig",3, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int parCleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$ParserCons$stack.peek()).value;
setNuevoParamComp();paramCompAct.setNombreParametro(parC);
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("NT$2",10, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramRel ::= PARAM NT$2 conectorL cad sig2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-3)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-4)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-4)).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-4)).value;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("paramRel",4, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
consultaAct.setNuevoConectorRelacional("AND");
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("NT$3",11, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sig2 ::= AND NT$3 paramRel 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).value;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("sig2",7, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =null;
consultaAct.setNuevoConectorRelacional("NOT");
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("NT$4",12, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sig2 ::= NOT NT$4 paramRel 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).value;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("sig2",7, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              Object RESULT =null;
consultaAct.setNuevoConectorRelacional("OR");
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("NT$5",13, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sig2 ::= OR NT$5 paramRel 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).value;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("sig2",7, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sig2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("sig2",7, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cad ::= NUM 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCons$stack.peek()).value;
		paramCompAct.setValorBuscar(nom);
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("cad",6, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cad ::= CADENA 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCons$stack.peek()).value;
		paramCompAct.setValorBuscar(nom);
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("cad",6, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cad ::= PARAM 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCons$stack.peek()).value;
		paramCompAct.setValorBuscar(nom);
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("cad",6, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // conectorL ::= IGUAL 
            {
              Object RESULT =null;
		paramCompAct.setOperadorLogico("IGUAL");
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("conectorL",5, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // conectorL ::= DESIG 
            {
              Object RESULT =null;
		paramCompAct.setOperadorLogico("DESIG");
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("conectorL",5, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // conectorL ::= MAYIG 
            {
              Object RESULT =null;
		paramCompAct.setOperadorLogico("MAYIG");
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("conectorL",5, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // conectorL ::= MENIG 
            {
              Object RESULT =null;
		paramCompAct.setOperadorLogico("MENIG");
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("conectorL",5, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // conectorL ::= MAY 
            {
              Object RESULT =null;
		paramCompAct.setOperadorLogico("MAY");
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("conectorL",5, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // conectorL ::= MEN 
            {
              Object RESULT =null;
		paramCompAct.setOperadorLogico("MEN");
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("conectorL",5, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCons$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCons$do_action(
    int                        CUP$ParserCons$act_num,
    java_cup.runtime.lr_parser CUP$ParserCons$parser,
    java.util.Stack            CUP$ParserCons$stack,
    int                        CUP$ParserCons$top)
    throws java.lang.Exception
    {
              return CUP$ParserCons$do_action_part00000000(
                               CUP$ParserCons$act_num,
                               CUP$ParserCons$parser,
                               CUP$ParserCons$stack,
                               CUP$ParserCons$top);
    }
}

}
