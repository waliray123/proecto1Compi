// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerForms.jflex

package analizadores;
import java_cup.runtime.*; 
import analizadores.symF.*;
import java.util.List;
import java.util.ArrayList;
import objetos.ErrorCom;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerForms implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\3\1\1\0\2\1\22\0\1\2\1\0\1\3"+
    "\1\0\1\4\3\0\1\5\1\6\2\0\1\7\1\10"+
    "\1\11\1\0\12\12\1\13\6\0\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\12\1\44\4\0"+
    "\1\45\1\0\1\46\1\47\1\12\1\50\1\12\1\51"+
    "\2\12\1\52\2\12\1\53\1\54\1\12\1\55\2\12"+
    "\1\56\1\57\1\12\1\60\5\12\1\61\1\62\1\63"+
    "\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\6\1\10\1\11\23\0\1\6\1\12\37\0"+
    "\1\13\1\0\1\14\77\0\1\15\5\0\1\16\7\0"+
    "\1\17\20\0\1\20\7\0\1\21\3\0\1\22\1\0"+
    "\1\23\4\0\1\24\11\0\1\25\4\0\1\26\4\0"+
    "\1\27\11\0\1\30\1\31\2\0\1\32\4\0\1\33"+
    "\7\0\1\34\2\0\1\35\16\0\1\36\1\37\10\0"+
    "\1\40\14\0\1\41\2\0\1\42\3\0\1\43\1\44"+
    "\1\0\1\45\1\0\1\46\2\0\1\47\4\0\1\50"+
    "\12\0\1\51\2\0\1\52\1\0\1\53\1\54\1\55"+
    "\1\0\1\56\2\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\64\0\64\0\64\0\320"+
    "\0\64\0\u0104\0\64\0\64\0\u0138\0\u016c\0\u01a0\0\u01d4"+
    "\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\64\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\64\0\u0b94\0\64\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8"+
    "\0\u182c\0\u1860\0\64\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964"+
    "\0\64\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\64\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc"+
    "\0\u1e10\0\64\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48"+
    "\0\u1f7c\0\64\0\u1fb0\0\u1fe4\0\u2018\0\64\0\u204c\0\64"+
    "\0\u2080\0\u20b4\0\u20e8\0\u211c\0\64\0\u2150\0\u2184\0\u21b8"+
    "\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\64\0\u2324"+
    "\0\u2358\0\u238c\0\u23c0\0\64\0\u23f4\0\u2428\0\u245c\0\u2490"+
    "\0\64\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc"+
    "\0\u2630\0\u2664\0\64\0\64\0\u2698\0\u26cc\0\64\0\u2700"+
    "\0\u2734\0\u2768\0\u279c\0\64\0\u27d0\0\u2804\0\u2838\0\u286c"+
    "\0\u28a0\0\u28d4\0\u2908\0\64\0\u293c\0\u2970\0\64\0\u29a4"+
    "\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44"+
    "\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\64\0\64\0\u2c7c"+
    "\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\64"+
    "\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88"+
    "\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\64\0\u308c\0\u30c0\0\64"+
    "\0\u30f4\0\u3128\0\u315c\0\64\0\64\0\u3190\0\64\0\u31c4"+
    "\0\64\0\u31f8\0\u322c\0\64\0\u3260\0\u3294\0\u32c8\0\u32fc"+
    "\0\64\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468"+
    "\0\u349c\0\u34d0\0\u3504\0\64\0\u3538\0\u356c\0\64\0\u35a0"+
    "\0\64\0\64\0\64\0\u35d4\0\64\0\u3608\0\u363c\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\2\2"+
    "\1\10\1\11\31\10\1\2\2\10\1\12\10\10\1\13"+
    "\1\2\1\14\65\0\2\3\63\0\1\15\1\0\1\16"+
    "\3\0\1\17\1\0\1\15\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\15\1\27\1\30\3\15\1\31"+
    "\1\32\2\15\1\33\1\15\1\34\1\35\1\15\1\36"+
    "\2\15\1\17\13\15\1\0\1\37\13\0\1\10\1\0"+
    "\31\10\1\0\13\10\15\0\1\10\1\0\31\10\1\0"+
    "\1\10\1\40\11\10\5\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\31\15\1\20\13\15\1\0\1\37"+
    "\5\0\1\42\5\0\1\42\1\0\45\42\1\0\1\42"+
    "\3\0\1\20\1\41\1\42\3\0\1\20\1\0\1\43"+
    "\1\20\45\43\1\0\1\42\3\0\1\20\1\41\4\0"+
    "\1\20\1\0\47\20\5\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\13\15\1\44\5\15\1\45\7\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\13\15\1\46\2\15\1\47"+
    "\12\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\1\50\3\15\1\51"+
    "\2\15\1\52\3\15\1\53\2\15\1\54\12\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\1\55\3\15\1\56\24\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\22\15\1\57\6\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\4\15\1\60\3\15\1\61\5\15\1\62"+
    "\12\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\3\15\1\63\10\15"+
    "\1\64\1\65\12\15\1\66\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\24\15\1\67\4\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\16\15"+
    "\1\70\12\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\17\15\1\71"+
    "\11\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\1\72\3\15\1\73"+
    "\24\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\4\15\1\74\3\15"+
    "\1\75\20\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\21\15\1\76"+
    "\1\77\6\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\7\15\1\100"+
    "\21\15\1\20\13\15\1\0\1\37\3\0\1\37\1\101"+
    "\6\0\1\37\1\0\31\37\1\0\13\37\1\0\1\37"+
    "\12\0\1\102\1\10\1\0\31\10\1\0\13\10\6\0"+
    "\1\103\1\42\5\0\1\42\1\0\45\42\1\0\1\42"+
    "\3\0\1\20\1\103\1\42\3\0\1\20\1\0\1\43"+
    "\1\20\45\43\1\0\1\42\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\10\15\1\104\20\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\4\15\1\105\24\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\24\15\1\106\4\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\23\15\1\107\5\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\14\15\1\110\14\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\15\15"+
    "\1\111\13\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\4\15\1\112"+
    "\24\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\1\113\30\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\13\15\1\114\1\115\14\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\21\15\1\116\7\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\21\15\1\117\7\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\23\15\1\120\5\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\2\15\1\121\26\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\2\15"+
    "\1\122\10\15\1\123\15\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\21\15\1\124\7\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\31\15"+
    "\1\125\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\1\126\30\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\3\15\1\127\25\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\20\15\1\130\10\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\22\15\1\131\6\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\14\15"+
    "\1\132\14\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\2\15\1\133"+
    "\26\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\3\15\1\134\25\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\20\15\1\135\10\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\14\15\1\136\12\15\1\137\1\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\23\15\1\140\5\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\13\15\1\141\15\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\24\15\1\142\4\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\10\15\1\143\20\15\1\20\13\15\1\0\1\37"+
    "\52\0\1\144\14\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\15\15\1\145\13\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\1\146\30\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\4\15"+
    "\1\147\24\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\16\15\1\150"+
    "\12\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\17\15\1\151\11\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\23\15\1\152\5\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\2\15\1\153\26\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\22\15\1\154\6\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\24\15\1\155\4\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\1\15\1\156\27\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\12\15"+
    "\1\157\16\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\4\15\1\160"+
    "\24\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\21\15\1\161\7\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\7\15\1\162\21\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\7\15\1\163\21\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\1\164\30\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\14\15\1\165\14\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\20\1\41\4\0\1\20\1\0\4\20\1\166\2\20"+
    "\1\167\37\20\5\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\6\15\1\170\22\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\10\15\1\171\20\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\24\15\1\172\4\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\23\15"+
    "\1\173\5\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\1\15\1\174"+
    "\27\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\10\15\1\175\20\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\10\15\1\176\20\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\24\15\1\177\4\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\1\200\30\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\23\15\1\201\5\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\24\15"+
    "\1\202\4\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\203\4\0\1\20\1\0\1\15\1\20\31\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\1\204\30\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\23\15\1\205\5\15\1\20\13\15\1\0\1\37"+
    "\56\0\1\206\10\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\4\15\1\207\24\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\31\15\1\210\13\15\1\0\1\37\3\0\1\15"+
    "\1\211\4\0\1\20\1\0\1\15\1\20\31\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\15\15\1\212\13\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\16\15\1\213\12\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\21\15\1\214\7\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\12\15\1\215\16\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\4\15"+
    "\1\216\24\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\14\15\1\217"+
    "\14\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\16\15\1\220\12\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\221\4\0"+
    "\1\20\1\0\1\15\1\20\31\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\2\15\1\222\26\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\24\15\1\223\4\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\1\224"+
    "\30\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\4\15\1\225\24\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\22\15\1\226\6\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\24\15\1\227\4\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\20\1\41\4\0\1\20\1\0"+
    "\20\20\1\230\26\20\5\0\1\20\1\41\4\0\1\20"+
    "\1\0\20\20\1\231\26\20\5\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\4\15\1\232\24\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\2\15\1\233\26\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\10\15\1\234\20\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\10\15\1\235\20\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\21\15\1\236\7\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\16\15"+
    "\1\237\12\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\16\15\1\240"+
    "\12\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\4\15\1\241\24\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\242\4\0"+
    "\1\20\1\0\1\15\1\20\31\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\16\15\1\243\12\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\13\15\1\244\15\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\21\15"+
    "\1\245\7\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\4\15\1\246"+
    "\24\15\1\20\13\15\1\0\1\37\57\0\1\247\7\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\1\250"+
    "\30\15\1\20\13\15\1\0\1\37\3\0\1\20\1\41"+
    "\4\0\1\20\1\0\25\20\1\251\21\20\5\0\1\15"+
    "\1\252\4\0\1\20\1\0\1\15\1\20\31\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\31\15\1\253\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\16\15\1\254\12\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\1\15"+
    "\1\255\27\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\256\4\0\1\20\1\0\1\15\1\20\31\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\15\15\1\257\13\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\260\4\0\1\20\1\0"+
    "\1\15\1\20\31\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\7\15"+
    "\1\261\21\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\2\15\1\262"+
    "\26\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\31\15\1\263\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\21\15\1\264\7\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\265\4\0\1\20\1\0\1\15"+
    "\1\20\31\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\13\15\1\266"+
    "\15\15\1\20\13\15\1\0\1\37\3\0\1\20\1\41"+
    "\4\0\1\20\1\0\16\20\1\267\30\20\5\0\1\20"+
    "\1\41\4\0\1\20\1\0\23\20\1\270\23\20\5\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\15\15"+
    "\1\271\13\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\4\15\1\272"+
    "\24\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\4\15\1\273\24\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\5\15\1\274\23\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\4\15\1\275\24\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\15\15\1\276\13\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\277\4\0\1\20\1\0\1\15"+
    "\1\20\31\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\21\15\1\300"+
    "\7\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\31\15\1\301\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\16\15\1\302\12\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\10\15\1\303\20\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\304\4\0\1\20\1\0\1\15\1\20"+
    "\31\15\1\20\13\15\1\0\1\37\55\0\1\305\11\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\2\15"+
    "\1\306\26\15\1\20\13\15\1\0\1\37\3\0\1\20"+
    "\1\41\4\0\1\20\1\0\6\20\1\307\40\20\5\0"+
    "\1\20\1\41\4\0\1\20\1\0\25\20\1\310\21\20"+
    "\5\0\1\15\1\311\4\0\1\20\1\0\1\15\1\20"+
    "\31\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\16\15\1\312\12\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\1\313\30\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\1\314\30\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\23\15\1\315\5\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\20\1\41\4\0\1\20\1\0\4\20\1\316\42\20"+
    "\5\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\16\15\1\317\12\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\1\320"+
    "\30\15\1\20\13\15\1\0\1\37\3\0\1\20\1\41"+
    "\4\0\1\20\1\0\21\20\1\321\25\20\5\0\1\20"+
    "\1\41\4\0\1\20\1\0\16\20\1\322\30\20\5\0"+
    "\1\15\1\323\4\0\1\20\1\0\1\15\1\20\31\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\15\1\324\4\0"+
    "\1\20\1\0\1\15\1\20\31\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\21\15\1\325\7\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\10\15\1\326\20\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\327\4\0\1\20\1\0\1\15\1\20\31\15"+
    "\1\330\13\15\1\0\1\37\3\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\4\15\1\331\24\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\10\15\1\332\20\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\20\1\41\4\0\1\20\1\0"+
    "\27\20\1\333\17\20\5\0\1\15\1\334\4\0\1\20"+
    "\1\0\1\15\1\20\31\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\16\15\1\335\12\15\1\20\13\15\1\0\1\37\61\0"+
    "\1\336\5\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\10\15\1\337\20\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\20\1\41\4\0\1\20\1\0\31\20\1\340"+
    "\15\20\5\0\1\20\1\41\4\0\1\20\1\0\6\20"+
    "\1\341\40\20\5\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\27\15\1\342\1\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\22\15\1\343\6\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\15\1\344\4\0\1\20\1\0\1\15\1\20"+
    "\31\15\1\20\13\15\1\0\1\37\3\0\1\15\1\41"+
    "\4\0\1\20\1\0\1\15\1\20\24\15\1\345\4\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\20\1\41\4\0"+
    "\1\20\1\0\23\20\1\346\23\20\5\0\1\15\1\347"+
    "\4\0\1\20\1\0\1\15\1\20\31\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\21\15\1\350\7\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\20\1\41\4\0\1\20\1\0\20\20"+
    "\1\351\26\20\5\0\1\20\1\41\4\0\1\20\1\0"+
    "\26\20\1\352\20\20\5\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\3\15\1\353\25\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\2\15\1\354\26\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\20\1\41\4\0\1\20\1\0\4\20"+
    "\1\355\42\20\5\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\22\15\1\356\6\15\1\20\13\15\1\0"+
    "\1\37\3\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\3\15\1\357\25\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\20\1\41\4\0\1\20\1\0\12\20\1\360"+
    "\34\20\5\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\31\15\1\361\13\15\1\0\1\37\54\0\1\362"+
    "\12\0\1\15\1\41\4\0\1\20\1\0\1\15\1\20"+
    "\16\15\1\363\12\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\20\1\41\4\0\1\20\1\0\25\20\1\364\21\20"+
    "\5\0\1\20\1\41\4\0\1\20\1\0\31\20\1\365"+
    "\15\20\5\0\1\15\1\366\4\0\1\20\1\0\1\15"+
    "\1\20\31\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\367\4\0\1\20\1\0\1\15\1\20\31\15\1\20"+
    "\13\15\1\0\1\37\3\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\21\15\1\370\7\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\20\1\41\4\0\1\20\1\0"+
    "\6\20\1\371\40\20\5\0\1\15\1\41\4\0\1\20"+
    "\1\0\1\15\1\20\10\15\1\372\20\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\20\1\41\4\0\1\20\1\0"+
    "\17\20\1\373\27\20\5\0\1\20\1\41\4\0\1\20"+
    "\1\0\15\20\1\374\31\20\5\0\1\15\1\41\4\0"+
    "\1\20\1\0\1\15\1\20\1\375\30\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\1\376\30\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\20\1\41\4\0\1\20\1\0\2\20\1\377"+
    "\44\20\5\0\1\15\1\u0100\4\0\1\20\1\0\1\15"+
    "\1\20\31\15\1\20\13\15\1\0\1\37\3\0\1\15"+
    "\1\41\4\0\1\20\1\0\1\15\1\20\16\15\1\u0101"+
    "\12\15\1\20\13\15\1\0\1\37\3\0\1\20\1\41"+
    "\4\0\1\20\1\0\24\20\1\u0102\22\20\5\0\1\20"+
    "\1\41\4\0\1\20\1\0\4\20\1\u0103\42\20\51\0"+
    "\1\u0104\17\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\15\15\1\u0105\13\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\20\1\41\4\0\1\20\1\0\20\20\1\u0106"+
    "\26\20\5\0\1\20\1\41\4\0\1\20\1\0\25\20"+
    "\1\u0107\21\20\5\0\1\15\1\41\4\0\1\20\1\0"+
    "\1\15\1\20\1\u0108\30\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\20\1\41\4\0\1\20\1\0\2\20\1\u0109"+
    "\44\20\5\0\1\15\1\41\4\0\1\20\1\0\1\15"+
    "\1\20\16\15\1\u010a\12\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\20\1\41\4\0\1\20\1\0\6\20\1\u010b"+
    "\40\20\5\0\1\20\1\41\4\0\1\20\1\0\2\20"+
    "\1\u010c\44\20\5\0\1\15\1\u010d\4\0\1\20\1\0"+
    "\1\15\1\20\31\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\15\1\41\4\0\1\20\1\0\1\15\1\20\21\15"+
    "\1\u010e\7\15\1\20\13\15\1\0\1\37\3\0\1\20"+
    "\1\41\4\0\1\20\1\0\16\20\1\u010f\30\20\5\0"+
    "\1\15\1\u0110\4\0\1\20\1\0\1\15\1\20\31\15"+
    "\1\20\13\15\1\0\1\37\3\0\1\20\1\41\4\0"+
    "\1\20\1\0\12\20\1\u0111\34\20\5\0\1\20\1\41"+
    "\4\0\1\20\1\0\23\20\1\u0112\23\20\61\0\1\u0113"+
    "\7\0\1\15\1\u0114\4\0\1\20\1\0\1\15\1\20"+
    "\31\15\1\20\13\15\1\0\1\37\3\0\1\20\1\u0115"+
    "\4\0\1\20\1\0\47\20\5\0\1\20\1\41\4\0"+
    "\1\20\1\0\20\20\1\u0116\26\20\5\0\1\15\1\u0117"+
    "\4\0\1\20\1\0\1\15\1\20\31\15\1\20\13\15"+
    "\1\0\1\37\3\0\1\20\1\41\4\0\1\20\1\0"+
    "\4\20\1\u0118\42\20\5\0\1\15\1\u0119\4\0\1\20"+
    "\1\0\1\15\1\20\31\15\1\20\13\15\1\0\1\37"+
    "\3\0\1\20\1\41\4\0\1\20\1\0\17\20\1\u011a"+
    "\27\20\5\0\1\20\1\41\4\0\1\20\1\0\23\20"+
    "\1\u011b\23\20\5\0\1\15\1\u011c\4\0\1\20\1\0"+
    "\1\15\1\20\31\15\1\20\13\15\1\0\1\37\3\0"+
    "\1\20\1\41\4\0\1\20\1\0\21\20\1\u011d\25\20"+
    "\5\0\1\20\1\41\4\0\1\20\1\0\3\20\1\u011e"+
    "\43\20\5\0\1\20\1\41\4\0\1\20\1\0\6\20"+
    "\1\u011f\40\20\55\0\1\u0120\13\0\1\20\1\u0121\4\0"+
    "\1\20\1\0\47\20\5\0\1\20\1\41\4\0\1\20"+
    "\1\0\12\20\1\u0122\34\20\5\0\1\20\1\41\4\0"+
    "\1\20\1\0\25\20\1\u0123\21\20\5\0\1\20\1\41"+
    "\4\0\1\20\1\0\12\20\1\u0124\34\20\5\0\1\20"+
    "\1\41\4\0\1\20\1\0\20\20\1\u0125\26\20\5\0"+
    "\1\20\1\41\4\0\1\20\1\0\15\20\1\u0126\31\20"+
    "\5\0\1\20\1\41\4\0\1\20\1\0\2\20\1\u0127"+
    "\44\20\60\0\1\u0128\10\0\1\20\1\41\4\0\1\20"+
    "\1\0\20\20\1\u0129\26\20\5\0\1\20\1\41\4\0"+
    "\1\20\1\0\6\20\1\u012a\40\20\5\0\1\20\1\41"+
    "\4\0\1\20\1\0\20\20\1\u012b\26\20\5\0\1\20"+
    "\1\u012c\4\0\1\20\1\0\47\20\5\0\1\20\1\41"+
    "\4\0\1\20\1\0\6\20\1\u012d\40\20\5\0\1\20"+
    "\1\41\4\0\1\20\1\0\4\20\1\u012e\42\20\62\0"+
    "\1\u012f\6\0\1\20\1\41\4\0\1\20\1\0\17\20"+
    "\1\u0130\27\20\5\0\1\20\1\u0131\4\0\1\20\1\0"+
    "\47\20\5\0\1\20\1\u0132\4\0\1\20\1\0\47\20"+
    "\5\0\1\20\1\u0133\4\0\1\20\1\0\47\20\5\0"+
    "\1\20\1\41\4\0\1\20\1\0\12\20\1\u0134\34\20"+
    "\5\0\1\20\1\u0135\4\0\1\20\1\0\47\20\5\0"+
    "\1\20\1\41\4\0\1\20\1\0\20\20\1\u0136\26\20"+
    "\5\0\1\20\1\41\4\0\1\20\1\0\17\20\1\u0137"+
    "\27\20\5\0\1\20\1\u0138\4\0\1\20\1\0\47\20"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\1\1\1\11\1\1\2\11"+
    "\23\0\1\1\1\11\37\0\1\11\1\0\1\11\77\0"+
    "\1\11\5\0\1\11\7\0\1\11\20\0\1\11\7\0"+
    "\1\11\3\0\1\11\1\0\1\11\4\0\1\11\11\0"+
    "\1\11\4\0\1\11\4\0\1\11\11\0\2\11\2\0"+
    "\1\11\4\0\1\11\7\0\1\11\2\0\1\11\16\0"+
    "\2\11\10\0\1\11\14\0\1\11\2\0\1\11\3\0"+
    "\2\11\1\0\1\11\1\0\1\11\2\0\1\11\4\0"+
    "\1\11\12\0\1\11\2\0\1\11\1\0\3\11\1\0"+
    "\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorCom> erroresCom;

    private void error(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Simbolo no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }    

    private void errorPalabra(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Palabra no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorNOMP(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un nombrep",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorNOMO(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un nombreopciones",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorID(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un ID",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    private void errorFINS(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","es un fin sols",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme));
    }

    public List<ErrorCom> getErroresCom() {
        return erroresCom;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerForms(java.io.Reader in) {
      erroresCom = new ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error(yytext()); new Symbol(symF.error,yyline,yycolumn, yytext());
            }
            // fall through
          case 48: break;
          case 2:
            { 
            }
            // fall through
          case 49: break;
          case 3:
            { return new Symbol(symF.PARI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 50: break;
          case 4:
            { return new Symbol(symF.PARD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 51: break;
          case 5:
            { return new Symbol(symF.COMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 52: break;
          case 6:
            { errorPalabra(yytext());
            }
            // fall through
          case 53: break;
          case 7:
            { return new Symbol(symF.DOSPUNT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 54: break;
          case 8:
            { return new Symbol(symF.CORCHI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 55: break;
          case 9:
            { return new Symbol(symF.CORCHD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 56: break;
          case 10:
            { return new Symbol(symF.NOMBREP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 57: break;
          case 11:
            { return new Symbol(symF.NOMBRE_OPCION,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 58: break;
          case 12:
            { return new Symbol(symF.ID,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 59: break;
          case 13:
            { return new Symbol(symF.URL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 60: break;
          case 14:
            { return new Symbol(symF.BLUE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 61: break;
          case 15:
            { return new Symbol(symF.DARK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 62: break;
          case 16:
            { return new Symbol(symF.TEMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 63: break;
          case 17:
            { return new Symbol(symF.BOTON,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 64: break;
          case 18:
            { return new Symbol(symF.CLASE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 65: break;
          case 19:
            { return new Symbol(symF.COMBO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 66: break;
          case 20:
            { return new Symbol(symF.FILAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 67: break;
          case 21:
            { return new Symbol(symF.RADIO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 68: break;
          case 22:
            { return new Symbol(symF.WHITE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 69: break;
          case 23:
            { return new Symbol(symF.CENTRO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 70: break;
          case 24:
            { return new Symbol(symF.IMAGEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 71: break;
          case 25:
            { return new Symbol(symF.INDICE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 72: break;
          case 26:
            { return new Symbol(symF.NOMBRE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 73: break;
          case 27:
            { return new Symbol(symF.TITUL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 74: break;
          case 28:
            { return new Symbol(symF.DERECHA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 75: break;
          case 29:
            { return new Symbol(symF.FICHERO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 76: break;
          case 30:
            { return new Symbol(symF.CHECK_BOX,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 77: break;
          case 31:
            { return new Symbol(symF.COLUMNAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 78: break;
          case 32:
            { return new Symbol(symF.OPCIONES,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 79: break;
          case 33:
            { return new Symbol(symF.IZQUIERDA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 80: break;
          case 34:
            { return new Symbol(symF.REQUE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 81: break;
          case 35:
            { return new Symbol(symF.ALINEA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 36:
            { return new Symbol(symF.AREA_TEXT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 37:
            { return new Symbol(symF.ESTRUCT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 84: break;
          case 38:
            { return new Symbol(symF.FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 39:
            { return new Symbol(symF.JUSTIFICAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 40:
            { return new Symbol(symF.CAMPO_TEXT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 41:
            { return new Symbol(symF.NOMBRE_CAMPO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 42:
            { return new Symbol(symF.INI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 43:
            { return new Symbol(symF.ID_COMP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 44:
            { return new Symbol(symF.ID_FORM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 45:
            { return new Symbol(symF.TEXTO_VIS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 46:
            { return new Symbol(symF.FECHA_CREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 47:
            { return new Symbol(symF.USUARIO_CREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerForms [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerForms scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerForms(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
